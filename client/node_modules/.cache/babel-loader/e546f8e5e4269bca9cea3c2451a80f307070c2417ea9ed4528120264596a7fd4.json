{"ast":null,"code":"import 'is-url';\nimport fetch from 'cross-fetch';\nimport * as fontkit from 'fontkit';\n\n/* eslint-disable max-classes-per-file */\n\nconst FONT_WEIGHTS = {\n  thin: 100,\n  hairline: 100,\n  ultralight: 200,\n  extralight: 200,\n  light: 300,\n  normal: 400,\n  medium: 500,\n  semibold: 600,\n  demibold: 600,\n  bold: 700,\n  ultrabold: 800,\n  extrabold: 800,\n  heavy: 900,\n  black: 900\n};\nconst fetchFont = async (src, options) => {\n  const response = await fetch(src, options);\n  const data = await response.arrayBuffer();\n  return new Uint8Array(data);\n};\nconst isDataUrl = dataUrl => {\n  const header = dataUrl.split(',')[0];\n  const hasDataPrefix = header.substring(0, 5) === 'data:';\n  const hasBase64Prefix = header.split(';')[1] === 'base64';\n  return hasDataPrefix && hasBase64Prefix;\n};\nconst resolveFontWeight = value => {\n  return typeof value === 'string' ? FONT_WEIGHTS[value] : value;\n};\nconst sortByFontWeight = (a, b) => a.fontWeight - b.fontWeight;\nclass FontSource {\n  constructor(src, fontFamily, fontStyle, fontWeight, options) {\n    this.src = src;\n    this.fontFamily = fontFamily;\n    this.fontStyle = fontStyle || 'normal';\n    this.fontWeight = fontWeight || 400;\n    this.data = null;\n    this.options = options;\n    this.loadResultPromise = null;\n  }\n  async _load() {\n    const {\n      postscriptName\n    } = this.options;\n    if (isDataUrl(this.src)) {\n      const raw = this.src.split(',')[1];\n      const uint8Array = new Uint8Array(atob(raw).split('').map(c => c.charCodeAt(0)));\n      this.data = fontkit.create(uint8Array, postscriptName);\n    } else {\n      const {\n        headers,\n        body,\n        method = 'GET'\n      } = this.options;\n      const data = await fetchFont(this.src, {\n        method,\n        body,\n        headers\n      });\n      this.data = fontkit.create(data, postscriptName);\n    }\n  }\n  async load() {\n    if (this.loadResultPromise === null) {\n      this.loadResultPromise = this._load();\n    }\n    return this.loadResultPromise;\n  }\n}\nclass Font {\n  static create(family) {\n    return new Font(family);\n  }\n  constructor(family) {\n    this.family = family;\n    this.sources = [];\n  }\n  register(_ref) {\n    let {\n      src,\n      fontWeight,\n      fontStyle,\n      ...options\n    } = _ref;\n    const numericFontWeight = resolveFontWeight(fontWeight);\n    this.sources.push(new FontSource(src, this.family, fontStyle, numericFontWeight, options));\n  }\n  resolve(descriptor) {\n    const {\n      fontWeight = 400,\n      fontStyle = 'normal'\n    } = descriptor;\n    const styleSources = this.sources.filter(s => s.fontStyle === fontStyle);\n\n    // Weight resolution. https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight#Fallback_weights\n    const exactFit = styleSources.find(s => s.fontWeight === fontWeight);\n    if (exactFit) return exactFit;\n    let res;\n    if (fontWeight >= 400 && fontWeight <= 500) {\n      const leftOffset = styleSources.filter(s => s.fontWeight <= fontWeight);\n      const rightOffset = styleSources.filter(s => s.fontWeight > 500);\n      const fit = styleSources.filter(s => s.fontWeight >= fontWeight && s.fontWeight < 500);\n      res = fit[0] || leftOffset[leftOffset.length - 1] || rightOffset[0];\n    }\n    const lt = styleSources.filter(s => s.fontWeight < fontWeight).sort(sortByFontWeight);\n    const gt = styleSources.filter(s => s.fontWeight > fontWeight).sort(sortByFontWeight);\n    if (fontWeight < 400) {\n      res = lt[lt.length - 1] || gt[0];\n    }\n    if (fontWeight > 500) {\n      res = gt[0] || lt[lt.length - 1];\n    }\n    if (!res) {\n      throw new Error(`Could not resolve font for ${this.family}, fontWeight ${fontWeight}`);\n    }\n    return res;\n  }\n}\nvar standard = ['Courier', 'Courier-Bold', 'Courier-Oblique', 'Courier-BoldOblique', 'Helvetica', 'Helvetica-Bold', 'Helvetica-Oblique', 'Helvetica-BoldOblique', 'Times-Roman', 'Times-Bold', 'Times-Italic', 'Times-BoldItalic'];\nfunction FontStore() {\n  let fonts = {};\n  let emojiSource = null;\n  let hyphenationCallback = null;\n  this.register = data => {\n    const {\n      family\n    } = data;\n    if (!fonts[family]) {\n      fonts[family] = Font.create(family);\n    }\n\n    // Bulk loading\n    if (data.fonts) {\n      for (let i = 0; i < data.fonts.length; i += 1) {\n        fonts[family].register({\n          family,\n          ...data.fonts[i]\n        });\n      }\n    } else {\n      fonts[family].register(data);\n    }\n  };\n  this.registerEmojiSource = _ref => {\n    let {\n      url,\n      format = 'png',\n      builder,\n      withVariationSelectors = false\n    } = _ref;\n    emojiSource = {\n      url,\n      format,\n      builder,\n      withVariationSelectors\n    };\n  };\n  this.registerHyphenationCallback = callback => {\n    hyphenationCallback = callback;\n  };\n  this.getFont = descriptor => {\n    const {\n      fontFamily\n    } = descriptor;\n    const isStandard = standard.includes(fontFamily);\n    if (isStandard) return null;\n    if (!fonts[fontFamily]) {\n      throw new Error(`Font family not registered: ${fontFamily}. Please register it calling Font.register() method.`);\n    }\n    return fonts[fontFamily].resolve(descriptor);\n  };\n  this.load = async descriptor => {\n    const {\n      fontFamily\n    } = descriptor;\n    const fontFamilies = typeof fontFamily === 'string' ? [fontFamily] : [...(fontFamily || [])];\n    const promises = [];\n    for (let len = fontFamilies.length, i = 0; i < len; i += 1) {\n      const family = fontFamilies[i];\n      const isStandard = standard.includes(family);\n      if (isStandard) return;\n      const f = this.getFont({\n        ...descriptor,\n        fontFamily: family\n      });\n      promises.push(f.load());\n    }\n    await Promise.all(promises);\n  };\n  this.reset = () => {\n    const keys = Object.keys(fonts);\n    for (let i = 0; i < keys.length; i += 1) {\n      const key = keys[i];\n      fonts[key].data = null;\n    }\n  };\n  this.clear = () => {\n    fonts = {};\n  };\n  this.getRegisteredFonts = () => fonts;\n  this.getEmojiSource = () => emojiSource;\n  this.getHyphenationCallback = () => hyphenationCallback;\n  this.getRegisteredFontFamilies = () => Object.keys(fonts);\n}\nexport { FontStore as default };","map":{"version":3,"names":["fetch","fontkit","FONT_WEIGHTS","thin","hairline","ultralight","extralight","light","normal","medium","semibold","demibold","bold","ultrabold","extrabold","heavy","black","fetchFont","src","options","response","data","arrayBuffer","Uint8Array","isDataUrl","dataUrl","header","split","hasDataPrefix","substring","hasBase64Prefix","resolveFontWeight","value","sortByFontWeight","a","b","fontWeight","FontSource","constructor","fontFamily","fontStyle","loadResultPromise","_load","postscriptName","raw","uint8Array","atob","map","c","charCodeAt","create","headers","body","method","load","Font","family","sources","register","_ref","numericFontWeight","push","resolve","descriptor","styleSources","filter","s","exactFit","find","res","leftOffset","rightOffset","fit","length","lt","sort","gt","Error","standard","FontStore","fonts","emojiSource","hyphenationCallback","i","registerEmojiSource","url","format","builder","withVariationSelectors","registerHyphenationCallback","callback","getFont","isStandard","includes","fontFamilies","promises","len","f","Promise","all","reset","keys","Object","key","clear","getRegisteredFonts","getEmojiSource","getHyphenationCallback","getRegisteredFontFamilies","default"],"sources":["C:/Users/broad/OneDrive/Documentos/FULLSTACK-TEST/pokedex/client/node_modules/@react-pdf/font/lib/index.browser.js"],"sourcesContent":["import 'is-url';\nimport fetch from 'cross-fetch';\nimport * as fontkit from 'fontkit';\n\n/* eslint-disable max-classes-per-file */\n\nconst FONT_WEIGHTS = {\n  thin: 100,\n  hairline: 100,\n  ultralight: 200,\n  extralight: 200,\n  light: 300,\n  normal: 400,\n  medium: 500,\n  semibold: 600,\n  demibold: 600,\n  bold: 700,\n  ultrabold: 800,\n  extrabold: 800,\n  heavy: 900,\n  black: 900\n};\nconst fetchFont = async (src, options) => {\n  const response = await fetch(src, options);\n  const data = await response.arrayBuffer();\n  return new Uint8Array(data);\n};\nconst isDataUrl = dataUrl => {\n  const header = dataUrl.split(',')[0];\n  const hasDataPrefix = header.substring(0, 5) === 'data:';\n  const hasBase64Prefix = header.split(';')[1] === 'base64';\n  return hasDataPrefix && hasBase64Prefix;\n};\nconst resolveFontWeight = value => {\n  return typeof value === 'string' ? FONT_WEIGHTS[value] : value;\n};\nconst sortByFontWeight = (a, b) => a.fontWeight - b.fontWeight;\nclass FontSource {\n  constructor(src, fontFamily, fontStyle, fontWeight, options) {\n    this.src = src;\n    this.fontFamily = fontFamily;\n    this.fontStyle = fontStyle || 'normal';\n    this.fontWeight = fontWeight || 400;\n    this.data = null;\n    this.options = options;\n    this.loadResultPromise = null;\n  }\n  async _load() {\n    const {\n      postscriptName\n    } = this.options;\n    if (isDataUrl(this.src)) {\n      const raw = this.src.split(',')[1];\n      const uint8Array = new Uint8Array(atob(raw).split('').map(c => c.charCodeAt(0)));\n      this.data = fontkit.create(uint8Array, postscriptName);\n    } else {\n      const {\n        headers,\n        body,\n        method = 'GET'\n      } = this.options;\n      const data = await fetchFont(this.src, {\n        method,\n        body,\n        headers\n      });\n      this.data = fontkit.create(data, postscriptName);\n    }\n  }\n  async load() {\n    if (this.loadResultPromise === null) {\n      this.loadResultPromise = this._load();\n    }\n    return this.loadResultPromise;\n  }\n}\nclass Font {\n  static create(family) {\n    return new Font(family);\n  }\n  constructor(family) {\n    this.family = family;\n    this.sources = [];\n  }\n  register(_ref) {\n    let {\n      src,\n      fontWeight,\n      fontStyle,\n      ...options\n    } = _ref;\n    const numericFontWeight = resolveFontWeight(fontWeight);\n    this.sources.push(new FontSource(src, this.family, fontStyle, numericFontWeight, options));\n  }\n  resolve(descriptor) {\n    const {\n      fontWeight = 400,\n      fontStyle = 'normal'\n    } = descriptor;\n    const styleSources = this.sources.filter(s => s.fontStyle === fontStyle);\n\n    // Weight resolution. https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight#Fallback_weights\n    const exactFit = styleSources.find(s => s.fontWeight === fontWeight);\n    if (exactFit) return exactFit;\n    let res;\n    if (fontWeight >= 400 && fontWeight <= 500) {\n      const leftOffset = styleSources.filter(s => s.fontWeight <= fontWeight);\n      const rightOffset = styleSources.filter(s => s.fontWeight > 500);\n      const fit = styleSources.filter(s => s.fontWeight >= fontWeight && s.fontWeight < 500);\n      res = fit[0] || leftOffset[leftOffset.length - 1] || rightOffset[0];\n    }\n    const lt = styleSources.filter(s => s.fontWeight < fontWeight).sort(sortByFontWeight);\n    const gt = styleSources.filter(s => s.fontWeight > fontWeight).sort(sortByFontWeight);\n    if (fontWeight < 400) {\n      res = lt[lt.length - 1] || gt[0];\n    }\n    if (fontWeight > 500) {\n      res = gt[0] || lt[lt.length - 1];\n    }\n    if (!res) {\n      throw new Error(`Could not resolve font for ${this.family}, fontWeight ${fontWeight}`);\n    }\n    return res;\n  }\n}\n\nvar standard = ['Courier', 'Courier-Bold', 'Courier-Oblique', 'Courier-BoldOblique', 'Helvetica', 'Helvetica-Bold', 'Helvetica-Oblique', 'Helvetica-BoldOblique', 'Times-Roman', 'Times-Bold', 'Times-Italic', 'Times-BoldItalic'];\n\nfunction FontStore() {\n  let fonts = {};\n  let emojiSource = null;\n  let hyphenationCallback = null;\n  this.register = data => {\n    const {\n      family\n    } = data;\n    if (!fonts[family]) {\n      fonts[family] = Font.create(family);\n    }\n\n    // Bulk loading\n    if (data.fonts) {\n      for (let i = 0; i < data.fonts.length; i += 1) {\n        fonts[family].register({\n          family,\n          ...data.fonts[i]\n        });\n      }\n    } else {\n      fonts[family].register(data);\n    }\n  };\n  this.registerEmojiSource = _ref => {\n    let {\n      url,\n      format = 'png',\n      builder,\n      withVariationSelectors = false\n    } = _ref;\n    emojiSource = {\n      url,\n      format,\n      builder,\n      withVariationSelectors\n    };\n  };\n  this.registerHyphenationCallback = callback => {\n    hyphenationCallback = callback;\n  };\n  this.getFont = descriptor => {\n    const {\n      fontFamily\n    } = descriptor;\n    const isStandard = standard.includes(fontFamily);\n    if (isStandard) return null;\n    if (!fonts[fontFamily]) {\n      throw new Error(`Font family not registered: ${fontFamily}. Please register it calling Font.register() method.`);\n    }\n    return fonts[fontFamily].resolve(descriptor);\n  };\n  this.load = async descriptor => {\n    const {\n      fontFamily\n    } = descriptor;\n    const fontFamilies = typeof fontFamily === 'string' ? [fontFamily] : [...(fontFamily || [])];\n    const promises = [];\n    for (let len = fontFamilies.length, i = 0; i < len; i += 1) {\n      const family = fontFamilies[i];\n      const isStandard = standard.includes(family);\n      if (isStandard) return;\n      const f = this.getFont({\n        ...descriptor,\n        fontFamily: family\n      });\n      promises.push(f.load());\n    }\n    await Promise.all(promises);\n  };\n  this.reset = () => {\n    const keys = Object.keys(fonts);\n    for (let i = 0; i < keys.length; i += 1) {\n      const key = keys[i];\n      fonts[key].data = null;\n    }\n  };\n  this.clear = () => {\n    fonts = {};\n  };\n  this.getRegisteredFonts = () => fonts;\n  this.getEmojiSource = () => emojiSource;\n  this.getHyphenationCallback = () => hyphenationCallback;\n  this.getRegisteredFontFamilies = () => Object.keys(fonts);\n}\n\nexport { FontStore as default };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}