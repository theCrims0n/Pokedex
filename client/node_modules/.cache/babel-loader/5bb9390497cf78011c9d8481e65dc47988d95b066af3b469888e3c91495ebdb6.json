{"ast":null,"code":"import { isNil, last, repeat, dropLast as dropLast$2, adjust, compose } from '@react-pdf/fns';\nimport bidiFactory from 'bidi-js';\nimport unicode from 'unicode-properties';\nimport hyphen from 'hyphen';\nimport pattern from 'hyphen/patterns/en-us.js';\n\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n * @typedef {import('../types.js').Fragment} Fragment\n */\n\n/**\n * Create attributed string from text fragments\n *\n * @param {Fragment[]} fragments fragments\n * @returns {AttributedString} attributed string\n */\nconst fromFragments = fragments => {\n  let offset = 0;\n  let string = '';\n  const runs = [];\n  fragments.forEach(fragment => {\n    string += fragment.string;\n    runs.push({\n      ...fragment,\n      start: offset,\n      end: offset + fragment.string.length,\n      attributes: fragment.attributes || {}\n    });\n    offset += fragment.string.length;\n  });\n  return {\n    string,\n    runs\n  };\n};\n\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n */\n\n/**\n * Default word hyphenation engine used when no one provided.\n * Does not perform word hyphenation at all\n *\n * @param {string} word\n * @returns {[string]} same word\n */\nconst defaultHyphenationEngine = word => [word];\n\n/**\n * Wrap words of attribute string\n *\n * @param {Object} engines layout engines\n * @param {Object} options layout options\n */\nconst wrapWords = function (engines, options) {\n  if (engines === void 0) {\n    engines = {};\n  }\n  if (options === void 0) {\n    options = {};\n  }\n  /**\n   * @param {AttributedString} attributedString attributed string\n   * @returns {AttributedString} attributed string including syllables\n   */\n  return attributedString => {\n    var _engines$wordHyphenat, _engines;\n    const syllables = [];\n    const fragments = [];\n    const hyphenateWord = options.hyphenationCallback || ((_engines$wordHyphenat = (_engines = engines).wordHyphenation) === null || _engines$wordHyphenat === void 0 ? void 0 : _engines$wordHyphenat.call(_engines, options)) || defaultHyphenationEngine;\n    for (let i = 0; i < attributedString.runs.length; i += 1) {\n      let string = '';\n      const run = attributedString.runs[i];\n      const words = attributedString.string.slice(run.start, run.end).split(/([ ]+)/g).filter(Boolean);\n      for (let j = 0; j < words.length; j += 1) {\n        const word = words[j];\n        const parts = hyphenateWord(word);\n        syllables.push(...parts);\n        string += parts.join('');\n      }\n      fragments.push({\n        ...run,\n        string\n      });\n    }\n    return {\n      ...fromFragments(fragments),\n      syllables\n    };\n  };\n};\n\n/**\n * @typedef {import('../types.js').Rect} Rect\n */\n\n/**\n * Clone rect\n *\n * @param {Rect} rect rect\n * @returns {Rect} cloned rect\n */\nconst copy = rect => {\n  return Object.assign({}, rect);\n};\n\n/**\n * @typedef {import('../types.js').Rect} Rect\n */\n\n/**\n *\n * @param {Rect} rect rect\n * @param {number} height height\n * @returns {[Rect, Rect]} partitioned rects\n */\nconst partition = (rect, height) => {\n  const a = Object.assign({}, rect, {\n    height\n  });\n  const b = Object.assign({}, rect, {\n    y: rect.y + height,\n    height: rect.height - height\n  });\n  return [a, b];\n};\n\n/**\n * @typedef {import('../types.js').Rect} Rect\n */\n\n/**\n * Crop upper section of rect\n *\n * @param {number} height height\n * @param {Rect} rect rect\n * @returns {Rect} cropped rect\n */\nconst crop = (height, rect) => {\n  const [, result] = partition(rect, height);\n  return result;\n};\n\n/**\n * Get paragraph block height\n *\n * @param {Object}  paragraph block\n * @returns {number} paragraph block height\n */\nconst height$2 = paragraph => {\n  return paragraph.reduce((acc, block) => acc + block.box.height, 0);\n};\n\n/**\n * @typedef {import('../types.js').Run} Run\n */\n\n/**\n * Calculate run scale\n *\n * @param {Run} run run\n * @returns {number} scale\n */\nconst calculateScale = run => {\n  var _attributes$font;\n  const attributes = run.attributes || {};\n  const fontSize = attributes.fontSize || 12;\n  const unitsPerEm = (_attributes$font = attributes.font) === null || _attributes$font === void 0 ? void 0 : _attributes$font.unitsPerEm;\n  return unitsPerEm ? fontSize / unitsPerEm : 0;\n};\n\n/**\n * Get run scale\n *\n * @param {Object}  run\n * @returns {number} scale\n */\nconst scale = run => {\n  var _run$attributes;\n  return ((_run$attributes = run.attributes) === null || _run$attributes === void 0 ? void 0 : _run$attributes.scale) || calculateScale(run);\n};\n\n/**\n * @typedef {import('../types.js').Run} Run\n */\n\n/**\n * Get ligature offset by index\n *\n * Ex. ffi ligature\n *\n *   glyphs:         l  o  f  f  i  m\n *   glyphIndices:   0  1  2  2  2  3\n *   offset:         0  0  0  1  2  0\n *\n * @param {number} index\n * @param {Run} run run\n * @returns {number} ligature offset\n */\nconst offset = (index, run) => {\n  if (!run) return 0;\n  const glyphIndices = run.glyphIndices || [];\n  const value = glyphIndices[index];\n  return glyphIndices.slice(0, index).filter(i => i === value).length;\n};\n\n/**\n * @typedef {import('../types.js').Font} Font\n * @typedef {import('../types.js').Run} Run\n */\n\n/**\n * Get run font\n *\n * @param {Run} run run\n * @returns {Font | null} font\n */\nconst getFont = run => {\n  var _run$attributes;\n  return ((_run$attributes = run.attributes) === null || _run$attributes === void 0 ? void 0 : _run$attributes.font) || null;\n};\n\n/**\n * @typedef {import('../types.js').Font} Font\n * @typedef {import('../types.js').Glyph} Glyph\n */\n\n/**\n * Slice glyph between codePoints range\n * Util for breaking ligatures\n *\n * @param {number} start start code point index\n * @param {number} end end code point index\n * @param {Font} font font to generate new glyph\n * @param {Glyph} glyph glyph to be sliced\n * @returns {Glyph[]} sliced glyph parts\n */\nconst slice$2 = (start, end, font, glyph) => {\n  if (!glyph) return [];\n  if (start === end) return [];\n  if (start === 0 && end === glyph.codePoints.length) return [glyph];\n  const codePoints = glyph.codePoints.slice(start, end);\n  const string = String.fromCodePoint(...codePoints);\n\n  // passing LTR To force fontkit to not reverse the string\n  return font ? font.layout(string, undefined, undefined, undefined, 'ltr').glyphs : [glyph];\n};\n\n/**\n * @typedef {import('../types.js').Run} Run\n */\n\n/**\n * Return glyph index at string index, if glyph indices present.\n * Otherwise return string index\n *\n * @param {number} index index\n * @param {Run} run run\n * @returns {number} glyph index\n */\nconst glyphIndexAt = (index, run) => {\n  var _run$glyphIndices;\n  const result = run === null || run === void 0 ? void 0 : (_run$glyphIndices = run.glyphIndices) === null || _run$glyphIndices === void 0 ? void 0 : _run$glyphIndices[index];\n  return isNil(result) ? index : result;\n};\n\n/**\n * Returns new array starting with zero, and keeping same relation between consecutive values\n *\n * @param {number[]} array list\n * @returns {number[]} normalized array\n */\nconst normalize = array => {\n  const head = array[0];\n  return array.map(value => value - head);\n};\n\n/**\n * @typedef {import('../types.js').Run} Run\n */\n\n/**\n * Slice run between glyph indices range\n *\n * @param {number} start glyph index\n * @param {number} end glyph index\n * @param {Run} run run\n * @returns {Run} sliced run\n */\nconst slice$1 = (start, end, run) => {\n  var _run$glyphs, _run$glyphs2;\n  const runScale = scale(run);\n  const font = getFont(run);\n\n  // Get glyph start and end indices\n  const startIndex = glyphIndexAt(start, run);\n  const endIndex = glyphIndexAt(end, run);\n\n  // Get start and end glyph\n  const startGlyph = (_run$glyphs = run.glyphs) === null || _run$glyphs === void 0 ? void 0 : _run$glyphs[startIndex];\n  const endGlyph = (_run$glyphs2 = run.glyphs) === null || _run$glyphs2 === void 0 ? void 0 : _run$glyphs2[endIndex];\n\n  // Get start ligature chunks (if any)\n  const startOffset = offset(start, run);\n  const startGlyphs = startOffset > 0 ? slice$2(startOffset, Infinity, font, startGlyph) : [];\n\n  // Get end ligature chunks (if any)\n  const endOffset = offset(end, run);\n  const endGlyphs = slice$2(0, endOffset, font, endGlyph);\n\n  // Compute new glyphs\n  const sliceStart = startIndex + Math.min(1, startOffset);\n  const glyphs = (run.glyphs || []).slice(sliceStart, endIndex);\n\n  // Compute new positions\n  const glyphPosition = g => ({\n    xAdvance: g.advanceWidth * runScale\n  });\n  const startPositions = startGlyphs.map(glyphPosition);\n  const positions = (run.positions || []).slice(sliceStart, endIndex);\n  const endPositions = endGlyphs.map(glyphPosition);\n  return Object.assign({}, run, {\n    start: run.start + start,\n    end: Math.min(run.end, run.start + end),\n    glyphIndices: normalize((run.glyphIndices || []).slice(start, end)),\n    glyphs: [startGlyphs, glyphs, endGlyphs].flat(),\n    positions: [startPositions, positions, endPositions].flat()\n  });\n};\n\n/**\n * @typedef {import('../types.js').Run} Run\n */\n\n/**\n * Get run index that contains passed index\n *\n * @param {number} n index\n * @param {Run[]} runs runs\n * @returns {number} run index\n */\nconst runIndexAt$1 = (n, runs) => {\n  if (!runs) return -1;\n  return runs.findIndex(run => run.start <= n && n < run.end);\n};\n\n/**\n * @typedef {import('../types.js').Run} Run\n */\n\n/**\n * Filter runs contained between start and end\n *\n * @param {number} start\n * @param {number} end\n * @param {Run[]} runs\n * @returns {Run[]} filtered runs\n */\nconst filter = (start, end, runs) => {\n  const startIndex = runIndexAt$1(start, runs);\n  const endIndex = Math.max(runIndexAt$1(end - 1, runs), startIndex);\n  return runs.slice(startIndex, endIndex + 1);\n};\n\n/**\n * @typedef {import('../types.js').Run} Run\n */\n\n/**\n * Subtract scalar to run\n *\n * @param {number} n scalar\n * @param {Run} run run\n * @returns {Object} subtracted run\n */\nconst subtract = (n, run) => {\n  const start = run.start - n;\n  const end = run.end - n;\n  return Object.assign({}, run, {\n    start,\n    end\n  });\n};\n\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n * @typedef {import('../types.js').Run} Run\n */\n\n/**\n * Slice array of runs\n *\n * @param {number} start offset\n * @param {number} end offset\n * @param {Run[]} runs\n * @returns {Run[]} sliced runs\n */\nconst sliceRuns = (start, end, runs) => {\n  const sliceFirstRun = a => slice$1(start - a.start, end - a.start, a);\n  const sliceLastRun = a => slice$1(0, end - a.start, a);\n  return runs.map((run, i) => {\n    let result = run;\n    const isFirst = i === 0;\n    const isLast = !isFirst && i === runs.length - 1;\n    if (isFirst) result = sliceFirstRun(run);\n    if (isLast) result = sliceLastRun(run);\n    return subtract(start, result);\n  });\n};\n\n/**\n * Slice attributed string between two indices\n *\n * @param {number} start offset\n * @param {number} end offset\n * @param {AttributedString} attributedString attributed string\n * @returns {AttributedString} attributed string\n */\nconst slice = (start, end, attributedString) => {\n  if (attributedString.string.length === 0) return attributedString;\n  const string = attributedString.string.slice(start, end);\n  const filteredRuns = filter(start, end, attributedString.runs);\n  const slicedRuns = sliceRuns(start, end, filteredRuns);\n  return Object.assign({}, attributedString, {\n    string,\n    runs: slicedRuns\n  });\n};\n\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n */\n\n/**\n * @param {string} string\n * @returns {number} index\n */\nconst findCharIndex = string => {\n  return string.search(/\\S/g);\n};\n\n/**\n * @param {string} string\n * @returns {number} index\n */\nconst findLastCharIndex = string => {\n  const match = string.match(/\\S/g);\n  return match ? string.lastIndexOf(match[match.length - 1]) : -1;\n};\n\n/**\n * Removes (strips) whitespace from both ends of the attributted string.\n *\n * @param {AttributedString} attributedString attributed string\n * @returns {AttributedString} attributed string\n */\nconst trim = attributedString => {\n  const start = findCharIndex(attributedString.string);\n  const end = findLastCharIndex(attributedString.string);\n  return slice(start, end + 1, attributedString);\n};\n\n/**\n * @typedef {import('../types.js').Run} Run\n */\n\n/**\n * Returns empty run\n *\n * @returns {Run} empty run\n */\nconst empty$1 = () => {\n  return {\n    start: 0,\n    end: 0,\n    glyphIndices: [],\n    glyphs: [],\n    positions: [],\n    attributes: {}\n  };\n};\n\n/**\n * Check if value is a number\n *\n * @template {unknown} T\n * @param {T} value Value to check\n * @returns {value is number} Whether value is a number\n */\nconst isNumber = value => {\n  return typeof value === 'number';\n};\n\n/**\n * Append glyph indices with given length\n *\n * Ex. appendIndices(3, [0, 1, 2, 2]) => [0, 1, 2, 2, 3, 3, 3]\n *\n * @param {number} length length\n * @param {number[]} indices glyph indices\n * @returns {number[]} extended glyph indices\n */\nconst appendIndices = (length, indices) => {\n  const lastIndex = last(indices);\n  const value = isNil(lastIndex) ? 0 : lastIndex + 1;\n  const newIndices = Array(length).fill(value);\n  return indices.concat(newIndices);\n};\n\n/**\n * @typedef {import('../types.js').Font} Font\n * @typedef {import('../types.js').Glyph} Glyph\n */\n\n/**\n * Get glyph for a given code point\n *\n * @param {number} [value] codePoint\n * @param {Font} [font] font\n * @returns {Glyph} glyph\n * */\nconst fromCodePoint = (value, font) => {\n  return font && value ? font.glyphForCodePoint(value) : null;\n};\n\n/**\n * @typedef {import('../types.js').Glyph} Glyph\n * @typedef {import('../types.js').Run} Run\n */\n\n/**\n * Append glyph to run\n *\n * @param {Glyph} glyph glyph\n * @param {Run} run run\n * @returns {Run} run with glyph\n */\nconst appendGlyph = (glyph, run) => {\n  var _glyph$codePoints;\n  const glyphLength = ((_glyph$codePoints = glyph.codePoints) === null || _glyph$codePoints === void 0 ? void 0 : _glyph$codePoints.length) || 0;\n  const end = run.end + glyphLength;\n  const glyphs = run.glyphs.concat(glyph);\n  const glyphIndices = appendIndices(glyphLength, run.glyphIndices);\n  if (!run.positions) return Object.assign({}, run, {\n    end,\n    glyphs,\n    glyphIndices\n  });\n  const positions = run.positions.concat({\n    xAdvance: glyph.advanceWidth * scale(run)\n  });\n  return Object.assign({}, run, {\n    end,\n    glyphs,\n    glyphIndices,\n    positions\n  });\n};\n\n/**\n * Append glyph or code point to run\n *\n * @param {Glyph | number | undefined} value glyph or codePoint\n * @param {Run} run run\n * @returns {Run} run with glyph\n */\nconst append$1 = (value, run) => {\n  if (!value) return run;\n  const font = getFont(run);\n  const glyph = isNumber(value) ? fromCodePoint(value, font) : value;\n  return appendGlyph(glyph, run);\n};\n\n/**\n * Get string from array of code points\n *\n * @param {number[]} codePoints points\n * @returns {string} string\n */\nconst stringFromCodePoints = codePoints => {\n  return String.fromCodePoint(...(codePoints || []));\n};\n\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n * @typedef {import('../types.js').Glyph} Glyph\n */\n\n/**\n * Append glyph into last run of attributed string\n *\n * @param {Glyph} glyph glyph\n * @param {AttributedString} attributedString attributed string\n * @returns {AttributedString} attributed string with new glyph\n */\nconst append = (glyph, attributedString) => {\n  const codePoints = (glyph === null || glyph === void 0 ? void 0 : glyph.codePoints) || [];\n  const codePointsString = stringFromCodePoints(codePoints);\n  const string = attributedString.string + codePointsString;\n  const firstRuns = attributedString.runs.slice(0, -1);\n  const lastRun = last(attributedString.runs) || empty$1();\n  const runs = firstRuns.concat(append$1(glyph, lastRun));\n  return Object.assign({}, attributedString, {\n    string,\n    runs\n  });\n};\nconst ELLIPSIS_UNICODE = 8230;\nconst ELLIPSIS_STRING = String.fromCharCode(ELLIPSIS_UNICODE);\n\n/**\n * Get ellipsis codepoint. This may be different in standard and embedded fonts\n *\n * @param {Object} font\n * @returns {Object} ellipsis codepoint\n */\nconst getEllipsisCodePoint = font => {\n  if (!font.encode) return ELLIPSIS_UNICODE;\n  const [codePoints] = font.encode(ELLIPSIS_STRING);\n  return parseInt(codePoints[0], 16);\n};\n\n/**\n * Trucante block with ellipsis\n *\n * @param {Object} block paragraph block\n * @returns {Object} sliced paragraph block\n */\nconst truncate = block => {\n  var _last, _last2, _last2$attributes;\n  const runs = ((_last = last(block)) === null || _last === void 0 ? void 0 : _last.runs) || [];\n  const font = (_last2 = last(runs)) === null || _last2 === void 0 ? void 0 : (_last2$attributes = _last2.attributes) === null || _last2$attributes === void 0 ? void 0 : _last2$attributes.font;\n  if (font) {\n    const index = block.length - 1;\n    const codePoint = getEllipsisCodePoint(font);\n    const glyph = font.glyphForCodePoint(codePoint);\n    const lastBlock = append(glyph, trim(block[index]));\n    return Object.assign([], block, {\n      [index]: lastBlock\n    });\n  }\n  return block;\n};\n\n/**\n * @typedef {import('../types.js').Attributes} Attributes\n * @typedef {import('../types.js').Run} Run\n */\n\n/**\n * Omit attribute from run\n *\n * @param {keyof Attributes} value attribute value\n * @param {Run} run run\n * @returns {Run} run without ommited attribute\n */\nconst omit = (value, run) => {\n  const attributes = Object.assign({}, run.attributes);\n  delete attributes[value];\n  return Object.assign({}, run, {\n    attributes\n  });\n};\n\n/**\n * @typedef {import('../types.js').Run} Run\n */\n\n/**\n * Get run ascent\n *\n * @param {Run} run run\n * @returns {number} ascent\n */\nconst ascent$1 = run => {\n  var _run$attributes, _run$attributes$attac, _run$attributes2, _run$attributes2$font;\n  const attachmentHeight = ((_run$attributes = run.attributes) === null || _run$attributes === void 0 ? void 0 : (_run$attributes$attac = _run$attributes.attachment) === null || _run$attributes$attac === void 0 ? void 0 : _run$attributes$attac.height) || 0;\n  const fontAscent = ((_run$attributes2 = run.attributes) === null || _run$attributes2 === void 0 ? void 0 : (_run$attributes2$font = _run$attributes2.font) === null || _run$attributes2$font === void 0 ? void 0 : _run$attributes2$font.ascent) || 0;\n  return Math.max(attachmentHeight, fontAscent * scale(run));\n};\n\n/**\n * @typedef {import('../types.js').Run} Run\n */\n\n/**\n * Get run descent\n *\n * @param {Run} run run\n * @returns {number} descent\n */\nconst descent = run => {\n  var _run$attributes, _run$attributes$font;\n  const fontDescent = ((_run$attributes = run.attributes) === null || _run$attributes === void 0 ? void 0 : (_run$attributes$font = _run$attributes.font) === null || _run$attributes$font === void 0 ? void 0 : _run$attributes$font.descent) || 0;\n  return scale(run) * fontDescent;\n};\n\n/**\n * @typedef {import('../types.js').Run} Run\n */\n\n/**\n * Get run lineGap\n *\n * @param {Object} run run\n * @returns {number} lineGap\n */\nconst lineGap = run => {\n  var _run$attributes, _run$attributes$font;\n  return (((_run$attributes = run.attributes) === null || _run$attributes === void 0 ? void 0 : (_run$attributes$font = _run$attributes.font) === null || _run$attributes$font === void 0 ? void 0 : _run$attributes$font.lineGap) || 0) * scale(run);\n};\n\n/**\n * @typedef {import('../types.js').Run} Run\n */\n\n/**\n * Get run height\n *\n * @param {Run} run run\n * @returns {number} height\n */\nconst height$1 = run => {\n  var _run$attributes;\n  const lineHeight = (_run$attributes = run.attributes) === null || _run$attributes === void 0 ? void 0 : _run$attributes.lineHeight;\n  return lineHeight || lineGap(run) + ascent$1(run) - descent(run);\n};\n\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n */\n\n/**\n * Returns attributed string height\n *\n * @param {AttributedString} attributedString attributed string\n * @returns {number} height\n */\nconst height = attributedString => {\n  const reducer = (acc, run) => Math.max(acc, height$1(run));\n  return attributedString.runs.reduce(reducer, 0);\n};\n\n/**\n * @typedef {import('../types.js').Rect} Rect\n */\n\n/**\n * Checks if two rects intersect each other\n *\n * @param {Rect} a rect A\n * @param {Rect} b rect B\n * @returns {boolean} whether rects intersect\n */\nconst intersects = (a, b) => {\n  const x = Math.max(a.x, b.x);\n  const num1 = Math.min(a.x + a.width, b.x + b.width);\n  const y = Math.max(a.y, b.y);\n  const num2 = Math.min(a.y + a.height, b.y + b.height);\n  return num1 >= x && num2 >= y;\n};\nconst getLineFragment = (lineRect, excludeRect) => {\n  if (!intersects(excludeRect, lineRect)) return [lineRect];\n  const eStart = excludeRect.x;\n  const eEnd = excludeRect.x + excludeRect.width;\n  const lStart = lineRect.x;\n  const lEnd = lineRect.x + lineRect.width;\n  const a = Object.assign({}, lineRect, {\n    width: eStart - lStart\n  });\n  const b = Object.assign({}, lineRect, {\n    x: eEnd,\n    width: lEnd - eEnd\n  });\n  return [a, b].filter(r => r.width > 0);\n};\nconst getLineFragments = (rect, excludeRects) => {\n  let fragments = [rect];\n  for (let i = 0; i < excludeRects.length; i += 1) {\n    const excludeRect = excludeRects[i];\n    fragments = fragments.reduce((acc, fragment) => {\n      const pieces = getLineFragment(fragment, excludeRect);\n      return acc.concat(pieces);\n    }, []);\n  }\n  return fragments;\n};\nconst generateLineRects = (container, height) => {\n  const {\n    excludeRects,\n    ...rect\n  } = container;\n  if (!excludeRects) return [rect];\n  const lineRects = [];\n  const maxY = Math.max(...excludeRects.map(r => r.y + r.height));\n  let currentRect = rect;\n  while (currentRect.y < maxY) {\n    const [lineRect, rest] = partition(currentRect, height);\n    const lineRectFragments = getLineFragments(lineRect, excludeRects);\n    currentRect = rest;\n    lineRects.push(...lineRectFragments);\n  }\n  return [...lineRects, currentRect];\n};\nconst ATTACHMENT_CODE$1 = '\\ufffc'; // 65532\n\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n * @typedef {import('../types.js').Rect} Rect\n */\n\n/**\n * Remove attachment attribute if no char present\n *\n * @param {AttributedString} attributedString attributed string\n * @returns {AttributedString} attributed string\n */\nconst purgeAttachments = attributedString => {\n  const shouldPurge = !attributedString.string.includes(ATTACHMENT_CODE$1);\n  if (!shouldPurge) return attributedString;\n  const runs = attributedString.runs.map(run => omit('attachment', run));\n  return Object.assign({}, attributedString, {\n    runs\n  });\n};\n\n/**\n * Layout paragraphs inside rectangle\n *\n * @param {Object} rects rect\n * @param {Object[]} lines attributed strings\n * @param {number} indent\n * @returns {Object} layout blocks\n */\nconst layoutLines = (rects, lines, indent) => {\n  let rect = rects.shift();\n  let currentY = rect.y;\n  return lines.map((line, i) => {\n    var _line$runs, _line$runs$;\n    const lineIndent = i === 0 ? indent : 0;\n    const style = ((_line$runs = line.runs) === null || _line$runs === void 0 ? void 0 : (_line$runs$ = _line$runs[0]) === null || _line$runs$ === void 0 ? void 0 : _line$runs$.attributes) || {};\n    const height$1 = Math.max(height(line), style.lineHeight);\n    if (currentY + height$1 > rect.y + rect.height && rects.length > 0) {\n      rect = rects.shift();\n      currentY = rect.y;\n    }\n    const newLine = Object.assign({}, line);\n    delete newLine.syllables;\n    newLine.box = {\n      x: rect.x + lineIndent,\n      y: currentY,\n      width: rect.width - lineIndent,\n      height: height$1\n    };\n    currentY += height$1;\n    return purgeAttachments(newLine);\n  });\n};\n\n/**\n * Performs line breaking and layout\n *\n * @param {Object} engines engines\n * @param {Object} options layout options\n */\nconst layoutParagraph = (engines, options) => {\n  /**\n   * @param {Rect} container rect\n   * @param {Object} paragraph attributed string\n   * @returns {Object} layout block\n   */\n  return (container, paragraph) => {\n    var _paragraph$runs, _paragraph$runs$, _paragraph$runs$$attr;\n    const height$1 = height(paragraph);\n    const indent = ((_paragraph$runs = paragraph.runs) === null || _paragraph$runs === void 0 ? void 0 : (_paragraph$runs$ = _paragraph$runs[0]) === null || _paragraph$runs$ === void 0 ? void 0 : (_paragraph$runs$$attr = _paragraph$runs$.attributes) === null || _paragraph$runs$$attr === void 0 ? void 0 : _paragraph$runs$$attr.indent) || 0;\n    const rects = generateLineRects(container, height$1);\n    const availableWidths = rects.map(r => r.width);\n    availableWidths[0] -= indent;\n    const lines = engines.linebreaker(options)(paragraph, availableWidths);\n    return layoutLines(rects, lines, indent);\n  };\n};\n\n/**\n * Slice block at given height\n *\n * @param {number} height height\n * @param {Object} block paragraph block\n * @returns {number[]} sliced paragraph block\n */\nconst sliceAtHeight = (height, block) => {\n  const newBlock = [];\n  let counter = 0;\n  for (let i = 0; i < block.length; i += 1) {\n    const line = block[i];\n    counter += line.box.height;\n    if (counter < height) {\n      newBlock.push(line);\n    } else {\n      break;\n    }\n  }\n  return newBlock;\n};\n\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n * @typedef {import('../types.js').Rect} Rect\n */\n\n/**\n * Layout paragraphs inside container until it does not\n * fit anymore, performing line wrapping in the process.\n *\n * @param {Object} engines engines\n * @param {Object} options layout options\n * @param {Rect} container container rect\n */\nconst typesetter = (engines, options, container) => {\n  /**\n   * @param {AttributedString} attributedStrings attributed strings (paragraphs)\n   * @returns {Object[]} paragraph blocks\n   */\n  return attributedStrings => {\n    const blocks = [];\n    const paragraphs = [...attributedStrings];\n    const layoutBlock = layoutParagraph(engines, options);\n    const maxLines = isNil(container.maxLines) ? Infinity : container.maxLines;\n    const truncateEllipsis = container.truncateMode === 'ellipsis';\n    let linesCount = maxLines;\n    let paragraphRect = copy(container);\n    let nextParagraph = paragraphs.shift();\n    while (linesCount > 0 && nextParagraph) {\n      const block = layoutBlock(paragraphRect, nextParagraph);\n      const slicedBlock = block.slice(0, linesCount);\n      const linesHeight = height$2(slicedBlock);\n      const shouldTruncate = truncateEllipsis && block.length !== slicedBlock.length;\n      linesCount -= slicedBlock.length;\n      if (paragraphRect.height >= linesHeight) {\n        blocks.push(shouldTruncate ? truncate(slicedBlock) : slicedBlock);\n        paragraphRect = crop(linesHeight, paragraphRect);\n        nextParagraph = paragraphs.shift();\n      } else {\n        blocks.push(truncate(sliceAtHeight(paragraphRect.height, slicedBlock)));\n        break;\n      }\n    }\n    return blocks;\n  };\n};\n\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n */\n\n/**\n * Get attributed string start value\n *\n * @param {AttributedString} attributedString attributed string\n * @returns {number} start\n */\nconst start = attributedString => {\n  const {\n    runs\n  } = attributedString;\n  return runs.length === 0 ? 0 : runs[0].start;\n};\n\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n */\n\n/**\n * Get attributed string end value\n *\n * @param {AttributedString} attributedString attributed string\n * @returns {number} end\n */\nconst end = attributedString => {\n  const {\n    runs\n  } = attributedString;\n  return runs.length === 0 ? 0 : last(runs).end;\n};\n\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n */\n\n/**\n * Get attributed string length\n *\n * @param {AttributedString} attributedString attributed string\n * @returns {number} end\n */\nconst length$1 = attributedString => {\n  return end(attributedString) - start(attributedString);\n};\n\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n * @typedef {import('../types.js').Glyph} Glyph\n * @typedef {import('../types.js').Position} Position\n * @typedef {import('../types.js').Run} Run\n */\n\nconst bidi$2 = bidiFactory();\n\n/**\n * @param {Run[]} runs\n * @returns {number[]} bidi levels\n */\nconst getBidiLevels$1 = runs => {\n  return runs.reduce((acc, run) => {\n    const length = run.end - run.start;\n    const levels = repeat(run.attributes.bidiLevel, length);\n    return acc.concat(levels);\n  }, []);\n};\nconst getReorderedIndices = (string, segments) => {\n  // Fill an array with indices\n  const indices = [];\n  for (let i = 0; i < string.length; i += 1) {\n    indices[i] = i;\n  }\n  // Reverse each segment in order\n  segments.forEach(_ref => {\n    let [start, end] = _ref;\n    const slice = indices.slice(start, end + 1);\n    for (let i = slice.length - 1; i >= 0; i -= 1) {\n      indices[end - i] = slice[i];\n    }\n  });\n  return indices;\n};\n\n/**\n * @template {'glyphs'|'positions'} T\n * @param {Run[]} runs\n * @param {T} objectName\n * @param {number} index\n * @returns {T extends 'glyphs' ? Glyph|undefined : Position|undefined}\n */\nconst getItemAtIndex = (runs, objectName, index) => {\n  for (let i = 0; i < runs.length; i += 1) {\n    const run = runs[i];\n    const updatedIndex = run.glyphIndices[index - run.start];\n    if (index >= run.start && index < run.end) {\n      return run[objectName][updatedIndex];\n    }\n  }\n  throw new Error(`index ${index} out of range`);\n};\n\n/**\n * @param {AttributedString} attributedString attributed string\n * @returns {AttributedString} reordered attributed string\n */\nconst reorderLine = attributedString => {\n  var _attributedString$run;\n  const levels = getBidiLevels$1(attributedString.runs);\n  const direction = (_attributedString$run = attributedString.runs[0]) === null || _attributedString$run === void 0 ? void 0 : _attributedString$run.attributes.direction;\n  const level = direction === 'rtl' ? 1 : 0;\n  const end = length$1(attributedString) - 1;\n  const paragraphs = [{\n    start: 0,\n    end,\n    level\n  }];\n  const embeddingLevels = {\n    paragraphs,\n    levels\n  };\n  const segments = bidi$2.getReorderSegments(attributedString.string, embeddingLevels);\n\n  // No need for bidi reordering\n  if (segments.length === 0) return attributedString;\n  const indices = getReorderedIndices(attributedString.string, segments);\n  const updatedString = bidi$2.getReorderedString(attributedString.string, embeddingLevels);\n  const updatedRuns = attributedString.runs.map(run => {\n    const selectedIndices = indices.slice(run.start, run.end);\n    const updatedGlyphs = [];\n    const updatedPositions = [];\n    const addedGlyphs = new Set();\n    for (let i = 0; i < selectedIndices.length; i += 1) {\n      const index = selectedIndices[i];\n      const glyph = getItemAtIndex(attributedString.runs, 'glyphs', index);\n      if (addedGlyphs.has(glyph.id)) continue;\n      updatedGlyphs.push(glyph);\n      updatedPositions.push(getItemAtIndex(attributedString.runs, 'positions', index));\n      if (glyph.isLigature) {\n        addedGlyphs.add(glyph.id);\n      }\n    }\n    return {\n      ...run,\n      glyphs: updatedGlyphs,\n      positions: updatedPositions\n    };\n  });\n  return {\n    ...attributedString,\n    runs: updatedRuns,\n    string: updatedString\n  };\n};\n\n/**\n * Reorder a paragraph\n *\n * @param {AttributedString[]} lines\n * @returns {AttributedString[]} reordered lines\n */\nconst reorderParagraph = lines => lines.map(reorderLine);\n\n/**\n * Perform bidi reordering\n *\n * @returns {(paragraphs: AttributedString[][]) => AttributedString[][]} reordered paragraphs\n */\nconst bidiReordering = () => {\n  /**\n   * @param {AttributedString[][]} paragraphs line blocks\n   * @returns {AttributedString[][]} reordered line blocks\n   */\n  return paragraphs => paragraphs.map(reorderParagraph);\n};\n\n/**\n * @typedef {import('../types.js').Glyph} Glyph\n */\n\nconst DUMMY_CODEPOINT = 123;\n\n/**\n * Resolve string indices based on glyphs code points\n *\n * @param {Glyph[]} glyphs\n * @returns {number[]} glyph indices\n */\nconst resolve = function (glyphs) {\n  if (glyphs === void 0) {\n    glyphs = [];\n  }\n  return glyphs.reduce((acc, glyph) => {\n    const codePoints = (glyph === null || glyph === void 0 ? void 0 : glyph.codePoints) || [DUMMY_CODEPOINT];\n    if (acc.length === 0) return codePoints.map(() => 0);\n    const last = acc[acc.length - 1];\n    const next = codePoints.map(() => last + 1);\n    return [...acc, ...next];\n  }, []);\n};\n\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n * @typedef {import('../types.js').Position} Position\n * @typedef {import('../types.js').Run} Run\n */\n\n/**\n * @param {Run} run\n * @returns {number}\n */\nconst getCharacterSpacing = run => {\n  var _run$attributes;\n  return ((_run$attributes = run.attributes) === null || _run$attributes === void 0 ? void 0 : _run$attributes.characterSpacing) || 0;\n};\n\n/**\n * Scale run positions\n *\n * @param {Run} run\n * @param {Position[]} positions\n * @returns {Position[]} scaled positions\n */\nconst scalePositions = (run, positions) => {\n  const runScale = scale(run);\n  const characterSpacing = getCharacterSpacing(run);\n  return positions.map((position, i) => {\n    const isLast = i === positions.length;\n    const xSpacing = isLast ? 0 : characterSpacing;\n    return Object.assign({}, position, {\n      xAdvance: position.xAdvance * runScale + xSpacing,\n      yAdvance: position.yAdvance * runScale,\n      xOffset: position.xOffset * runScale,\n      yOffset: position.yOffset * runScale\n    });\n  });\n};\n\n/**\n * Create glyph run\n *\n * @param {string} string string\n */\nconst layoutRun = string => {\n  /**\n   * @param {Run} run run\n   * @returns {Run} glyph run\n   */\n  return run => {\n    const {\n      start,\n      end,\n      attributes = {}\n    } = run;\n    const {\n      font\n    } = attributes;\n    if (!font) return {\n      ...run,\n      glyphs: [],\n      glyphIndices: [],\n      positions: []\n    };\n    const runString = string.slice(start, end);\n\n    // passing LTR To force fontkit to not reverse the string\n    const glyphRun = font.layout(runString, undefined, undefined, undefined, 'ltr');\n    const positions = scalePositions(run, glyphRun.positions);\n    const glyphIndices = resolve(glyphRun.glyphs);\n    return {\n      ...run,\n      positions,\n      glyphIndices,\n      glyphs: glyphRun.glyphs\n    };\n  };\n};\n\n/**\n * Generate glyphs for single attributed string\n */\nconst generateGlyphs = () => {\n  /**\n   * @param {AttributedString} attributedString attributed string\n   * @returns {AttributedString} attributed string with glyphs\n   */\n  return attributedString => {\n    const runs = attributedString.runs.map(layoutRun(attributedString.string));\n    return Object.assign({}, attributedString, {\n      runs\n    });\n  };\n};\n\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n * @typedef {import('../types.js').Run} Run\n */\n\n/**\n * Resolves yOffset for run\n *\n * @param {Run} run run\n * @returns {Run} run\n */\nconst resolveRunYOffset = run => {\n  var _run$attributes, _run$attributes$font, _run$attributes2;\n  if (!run.positions) return run;\n  const unitsPerEm = ((_run$attributes = run.attributes) === null || _run$attributes === void 0 ? void 0 : (_run$attributes$font = _run$attributes.font) === null || _run$attributes$font === void 0 ? void 0 : _run$attributes$font.unitsPerEm) || 0;\n  const yOffset = (((_run$attributes2 = run.attributes) === null || _run$attributes2 === void 0 ? void 0 : _run$attributes2.yOffset) || 0) * unitsPerEm;\n  const positions = run.positions.map(p => Object.assign({}, p, {\n    yOffset\n  }));\n  return Object.assign({}, run, {\n    positions\n  });\n};\n\n/**\n * Resolves yOffset for multiple paragraphs\n */\nconst resolveYOffset = () => {\n  /**\n   * @param {AttributedString} attributedString attributed string\n   * @returns {AttributedString} attributed string\n   */\n  return attributedString => {\n    const runs = attributedString.runs.map(resolveRunYOffset);\n    return Object.assign({}, attributedString, {\n      runs\n    });\n  };\n};\n\n/**\n * @typedef {import('../types.js').Run} Run\n */\n\n/**\n * Sort runs in ascending order\n *\n * @param {Run[]} runs\n * @returns {Run[]} sorted runs\n */\nconst sort = runs => {\n  return runs.sort((a, b) => a.start - b.start || a.end - b.end);\n};\n\n/**\n * @typedef {import('../types.js').Run} Run\n */\n\n/**\n * Is run empty (start === end)\n *\n * @param {Run} run run\n * @returns {boolean} is run empty\n */\nconst isEmpty = run => {\n  return run.start === run.end;\n};\n\n/**\n * @typedef {import('../types.js').Point} Point\n * @typedef {import('../types.js').Run} Run\n */\n\n/**\n * Sort points in ascending order\n * @param {Point} a first point\n * @param {Point} b second point\n * @returns {number} sort order\n */\nconst sortPoints = (a, b) => {\n  return a[1] - b[1] || a[3] - b[3];\n};\n\n/**\n * @param {Run[]} runs\n * @returns {Point[]} points\n */\nconst generatePoints = runs => {\n  const result = runs.reduce((acc, run, i) => {\n    return acc.concat([['start', run.start, run.attributes, i], ['end', run.end, run.attributes, i]]);\n  }, []);\n  return result.sort(sortPoints);\n};\n\n/**\n * @param {Run[]} runs\n * @returns {Run} merged runs\n */\nconst mergeRuns = runs => {\n  return runs.reduce((acc, run) => {\n    const attributes = Object.assign({}, acc.attributes, run.attributes);\n    return Object.assign({}, run, {\n      attributes\n    });\n  }, {});\n};\n\n/**\n * @param {Run[]} runs\n * @returns {Run[][]} grouped runs\n */\nconst groupEmptyRuns = runs => {\n  const groups = runs.reduce((acc, run) => {\n    if (!acc[run.start]) acc[run.start] = [];\n    acc[run.start].push(run);\n    return acc;\n  }, []);\n  return Object.values(groups);\n};\n\n/**\n * @param {Run[]} runs\n * @returns {Run[]} flattened runs\n */\nconst flattenEmptyRuns = runs => {\n  return groupEmptyRuns(runs).map(mergeRuns);\n};\n\n/**\n * @param {Run[]} runs\n * @returns {Run[]} flattened runs\n */\nconst flattenRegularRuns = runs => {\n  const res = [];\n  const points = generatePoints(runs);\n  let start = -1;\n  let attrs = {};\n  const stack = [];\n  for (let i = 0; i < points.length; i += 1) {\n    const [type, offset, attributes] = points[i];\n    if (start !== -1 && start < offset) {\n      res.push({\n        start,\n        end: offset,\n        attributes: attrs\n      });\n    }\n    if (type === 'start') {\n      stack.push(attributes);\n      attrs = Object.assign({}, attrs, attributes);\n    } else {\n      attrs = {};\n      for (let j = 0; j < stack.length; j += 1) {\n        if (stack[j] === attributes) {\n          // eslint-disable-next-line no-plusplus\n          stack.splice(j--, 1);\n        } else {\n          attrs = Object.assign({}, attrs, stack[j]);\n        }\n      }\n    }\n    start = offset;\n  }\n  return res;\n};\n\n/**\n * Flatten many runs\n *\n * @param {Run[]} runs\n * @returns {Run[]} flattened runs\n */\nconst flatten = function (runs) {\n  if (runs === void 0) {\n    runs = [];\n  }\n  const emptyRuns = flattenEmptyRuns(runs.filter(run => isEmpty(run)));\n  const regularRuns = flattenRegularRuns(runs.filter(run => !isEmpty(run)));\n  return sort(emptyRuns.concat(regularRuns));\n};\n\n/**\n * Returns empty attributed string\n *\n * @returns {Object} empty attributed string\n */\nconst empty = () => ({\n  string: '',\n  runs: []\n});\n\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n */\n\n/**\n *\n * @param {AttributedString} attributedString\n * @returns {AttributedString} attributed string without font\n */\nconst omitFont = attributedString => {\n  const runs = attributedString.runs.map(run => omit('font', run));\n  return Object.assign({}, attributedString, {\n    runs\n  });\n};\n\n/**\n * Performs font substitution and script itemization on attributed string\n *\n * @param {Object} engines engines\n * @param {Object} options layout options\n */\nconst preprocessRuns = (engines, options) => {\n  /**\n   * @param {AttributedString} attributedString attributed string\n   * @returns {AttributedString} processed attributed string\n   */\n  return attributedString => {\n    if (isNil(attributedString)) return empty();\n    const {\n      string\n    } = attributedString;\n    const {\n      fontSubstitution,\n      scriptItemizer,\n      bidi\n    } = engines;\n    const {\n      runs: omittedFontRuns\n    } = omitFont(attributedString);\n    const {\n      runs: itemizationRuns\n    } = scriptItemizer(options)(attributedString);\n    const {\n      runs: substitutedRuns\n    } = fontSubstitution(options)(attributedString);\n    const {\n      runs: bidiRuns\n    } = bidi(options)(attributedString);\n    const runs = bidiRuns.concat(substitutedRuns).concat(itemizationRuns).concat(omittedFontRuns);\n    return {\n      string,\n      runs: flatten(runs)\n    };\n  };\n};\n\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n */\n\n/**\n * Breaks attributed string into paragraphs\n */\nconst splitParagraphs = () => {\n  /**\n   * @param {AttributedString} attributedString attributed string\n   * @returns {AttributedString[]} attributed string array\n   */\n  return attributedString => {\n    const res = [];\n    let start = 0;\n    let breakPoint = attributedString.string.indexOf('\\n') + 1;\n    while (breakPoint > 0) {\n      res.push(slice(start, breakPoint, attributedString));\n      start = breakPoint;\n      breakPoint = attributedString.string.indexOf('\\n', breakPoint) + 1;\n    }\n    if (start === 0) {\n      res.push(attributedString);\n    } else if (start < attributedString.string.length) {\n      res.push(slice(start, length$1(attributedString), attributedString));\n    }\n    return res;\n  };\n};\n\n/**\n * @typedef {import('../types.js').Position} Position\n */\n\n/**\n * Return positions advance width\n *\n * @param {Position[]} positions positions\n * @returns {number} advance width\n */\nconst advanceWidth$2 = positions => {\n  return positions.reduce((acc, pos) => acc + (pos.xAdvance || 0), 0);\n};\n\n/**\n * @typedef {import('../types.js').Run} Run\n */\n\n/**\n * Return run advance width\n *\n * @param {Run} run run\n * @returns {number} advance width\n */\nconst advanceWidth$1 = run => {\n  return advanceWidth$2(run.positions || []);\n};\n\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n */\n\n/**\n * Returns attributed string advancewidth\n *\n * @param {AttributedString} attributedString attributed string\n * @returns {number} advance width\n */\nconst advanceWidth = attributedString => {\n  const reducer = (acc, run) => acc + advanceWidth$1(run);\n  return attributedString.runs.reduce(reducer, 0);\n};\n\n/**\n * @typedef {import('../types.js').Glyph} Glyph\n */\n\nconst WHITE_SPACES_CODE = 32;\n\n/**\n * Check if glyph is white space\n *\n * @param {Glyph} [glyph] glyph\n * @returns {boolean} whether glyph is white space\n * */\nconst isWhiteSpace = glyph => {\n  const codePoints = (glyph === null || glyph === void 0 ? void 0 : glyph.codePoints) || [];\n  return codePoints.includes(WHITE_SPACES_CODE);\n};\n\n/**\n * @typedef {import('../types.js').Position} Position\n * @typedef {import('../types.js').Run} Run\n */\n\n/**\n * Get white space leading positions\n *\n * @param {Run} run run\n * @returns {Position[]} white space leading positions\n */\nconst leadingPositions = run => {\n  const glyphs = run.glyphs || [];\n  const positions = run.positions || [];\n  const leadingWhitespaces = glyphs.findIndex(g => !isWhiteSpace(g));\n  return positions.slice(0, leadingWhitespaces);\n};\n\n/**\n * Get run leading white space offset\n *\n * @param {Run} run run\n * @returns {number} leading white space offset\n */\nconst leadingOffset$1 = run => {\n  const positions = leadingPositions(run);\n  return positions.reduce((acc, pos) => acc + (pos.xAdvance || 0), 0);\n};\n\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n */\n\n/**\n * Get attributed string leading white space offset\n *\n * @param {AttributedString} attributedString attributed string\n * @returns {number} leading white space offset\n */\nconst leadingOffset = attributedString => {\n  const runs = attributedString.runs || [];\n  return leadingOffset$1(runs[0]);\n};\n\n/**\n * @typedef {import('../types.js').Position} Position\n * @typedef {import('../types.js').Run} Run\n */\n\n/**\n * @template T\n * @param {T[]} array\n * @returns {T[]} reversed array\n */\nconst reverse = array => {\n  return [...array].reverse();\n};\n\n/**\n * Get white space trailing positions\n *\n * @param {Run} run run\n * @returns {Position[]} white space trailing positions\n */\nconst trailingPositions = run => {\n  const glyphs = reverse(run.glyphs || []);\n  const positions = reverse(run.positions || []);\n  const leadingWhitespaces = glyphs.findIndex(g => !isWhiteSpace(g));\n  return positions.slice(0, leadingWhitespaces);\n};\n\n/**\n * Get run trailing white space offset\n *\n * @param {Run} run run\n * @returns {number} trailing white space offset\n */\nconst trailingOffset$1 = run => {\n  const positions = trailingPositions(run);\n  return positions.reduce((acc, pos) => acc + (pos.xAdvance || 0), 0);\n};\n\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n */\n\n/**\n * Get attributed string trailing white space offset\n *\n * @param {AttributedString} attributedString attributed string\n * @returns {number} trailing white space offset\n */\nconst trailingOffset = attributedString => {\n  const runs = attributedString.runs || [];\n  return trailingOffset$1(last(runs));\n};\n\n/**\n * @typedef {import('../types.js').Run} Run\n */\n\n/**\n * Drop last char of run\n *\n * @param {Run} run run\n * @returns {Run} run without last char\n */\nconst dropLast$1 = run => {\n  return slice$1(0, run.end - run.start - 1, run);\n};\n\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n */\n\n/**\n * Drop last glyph\n *\n * @param {AttributedString} attributedString attributed string\n * @returns {AttributedString} attributed string with new glyph\n */\nconst dropLast = attributedString => {\n  const string = dropLast$2(attributedString.string);\n  const runs = adjust(-1, dropLast$1, attributedString.runs);\n  return Object.assign({}, attributedString, {\n    string,\n    runs\n  });\n};\nconst ALIGNMENT_FACTORS = {\n  center: 0.5,\n  right: 1\n};\n\n/**\n * Remove new line char at the end of line if present\n *\n * @param {Object}  line\n * @returns {Object} line\n */\nconst removeNewLine = line => {\n  return last(line.string) === '\\n' ? dropLast(line) : line;\n};\nconst getOverflowLeft = line => {\n  return leadingOffset(line) + (line.overflowLeft || 0);\n};\nconst getOverflowRight = line => {\n  return trailingOffset(line) + (line.overflowRight || 0);\n};\n\n/**\n * Ignore whitespace at the start and end of a line for alignment\n *\n * @param {Object}  line\n * @returns {Object} line\n */\nconst adjustOverflow = line => {\n  const overflowLeft = getOverflowLeft(line);\n  const overflowRight = getOverflowRight(line);\n  const x = line.box.x - overflowLeft;\n  const width = line.box.width + overflowLeft + overflowRight;\n  const box = Object.assign({}, line.box, {\n    x,\n    width\n  });\n  return Object.assign({}, line, {\n    box,\n    overflowLeft,\n    overflowRight\n  });\n};\n\n/**\n * Performs line justification by calling appropiate engine\n *\n * @param {Object} engines engines\n * @param {Object} options layout options\n * @param {string} align text align\n */\nconst justifyLine$1 = (engines, options, align) => {\n  /**\n   * @param {Object} line lint\n   * @returns {Object} line\n   */\n  return line => {\n    const lineWidth = advanceWidth(line);\n    const alignFactor = ALIGNMENT_FACTORS[align] || 0;\n    const remainingWidth = Math.max(0, line.box.width - lineWidth);\n    const shouldJustify = align === 'justify' || lineWidth > line.box.width;\n    const x = line.box.x + remainingWidth * alignFactor;\n    const box = Object.assign({}, line.box, {\n      x\n    });\n    const newLine = Object.assign({}, line, {\n      box\n    });\n    return shouldJustify ? engines.justification(options)(newLine) : newLine;\n  };\n};\nconst finalizeLine = line => {\n  let lineAscent = 0;\n  let lineDescent = 0;\n  let lineHeight = 0;\n  let lineXAdvance = 0;\n  const runs = line.runs.map(run => {\n    const height = height$1(run);\n    const ascent = ascent$1(run);\n    const descent$1 = descent(run);\n    const xAdvance = advanceWidth$1(run);\n    lineHeight = Math.max(lineHeight, height);\n    lineAscent = Math.max(lineAscent, ascent);\n    lineDescent = Math.max(lineDescent, descent$1);\n    lineXAdvance += xAdvance;\n    return Object.assign({}, run, {\n      height,\n      ascent,\n      descent: descent$1,\n      xAdvance\n    });\n  });\n  return Object.assign({}, line, {\n    runs,\n    height: lineHeight,\n    ascent: lineAscent,\n    descent: lineDescent,\n    xAdvance: lineXAdvance\n  });\n};\n\n/**\n * Finalize line by performing line justification\n * and text decoration (using appropiate engines)\n *\n * @param {Object} engines engines\n * @param {Object} options layout options\n */\nconst finalizeBlock = function (engines, options) {\n  if (engines === void 0) {\n    engines = {};\n  }\n  /**\n   * @param {Object} line lint\n   * @param {number} i line index\n   * @param {Object[]} lines total lines\n   * @returns {Object} line\n   */\n  return (line, i, lines) => {\n    var _line$runs, _line$runs$;\n    const isLastFragment = i === lines.length - 1;\n    const style = ((_line$runs = line.runs) === null || _line$runs === void 0 ? void 0 : (_line$runs$ = _line$runs[0]) === null || _line$runs$ === void 0 ? void 0 : _line$runs$.attributes) || {};\n    const align = isLastFragment ? style.alignLastLine : style.align;\n    return compose(finalizeLine, engines.textDecoration(options), justifyLine$1(engines, options, align), adjustOverflow, removeNewLine)(line);\n  };\n};\n\n/**\n * Finalize line block by performing line justification\n * and text decoration (using appropiate engines)\n *\n * @param {Object} engines engines\n * @param {Object} options layout options\n */\nconst finalizeFragments = (engines, options) => {\n  /**\n   * @param {Object[]} blocks line blocks\n   * @returns {Object[]} blocks\n   */\n  return blocks => {\n    const blockFinalizer = finalizeBlock(engines, options);\n    return blocks.map(block => block.map(blockFinalizer));\n  };\n};\n\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n */\n\nconst ATTACHMENT_CODE = 0xfffc; // 65532\n\nconst isReplaceGlyph = glyph => glyph.codePoints.includes(ATTACHMENT_CODE);\n\n/**\n * Resolve attachments of run\n *\n * @param {Object}  run\n * @returns {Object} run\n */\nconst resolveRunAttachments = run => {\n  var _run$attributes;\n  if (!run.positions) return run;\n  const glyphs = run.glyphs || [];\n  const attachment = ((_run$attributes = run.attributes) === null || _run$attributes === void 0 ? void 0 : _run$attributes.attachment) || {};\n  const positions = run.positions.map((position, i) => {\n    const glyph = glyphs[i];\n    if (attachment && attachment.width && isReplaceGlyph(glyph)) {\n      return Object.assign({}, position, {\n        xAdvance: attachment.width\n      });\n    }\n    return Object.assign({}, position);\n  });\n  return Object.assign({}, run, {\n    positions\n  });\n};\n\n/**\n * Resolve attachments for multiple paragraphs\n */\nconst resolveAttachments = () => {\n  /**\n   * @param {AttributedString} attributedString attributed string\n   * @returns {AttributedString} attributed string\n   */\n  return attributedString => {\n    const runs = attributedString.runs.map(resolveRunAttachments);\n    return Object.assign({}, attributedString, {\n      runs\n    });\n  };\n};\n\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n * @typedef {import('../types.js').Attributes} Attributes\n * @typedef {import('../types.js').Run} Run\n */\n\n/**\n * @param {Attributes} a attributes\n * @returns {Attributes} attributes with defaults\n */\nconst applyAttributes = a => {\n  return {\n    align: a.align || (a.direction === 'rtl' ? 'right' : 'left'),\n    alignLastLine: a.alignLastLine || (a.align === 'justify' ? 'left' : a.align || 'left'),\n    attachment: a.attachment || null,\n    backgroundColor: a.backgroundColor || null,\n    bullet: a.bullet || null,\n    characterSpacing: a.characterSpacing || 0,\n    color: a.color || 'black',\n    direction: a.direction || 'ltr',\n    features: a.features || [],\n    fill: a.fill !== false,\n    font: a.font || null,\n    fontSize: a.fontSize || 12,\n    hangingPunctuation: a.hangingPunctuation || false,\n    hyphenationFactor: a.hyphenationFactor || 0,\n    indent: a.indent || 0,\n    justificationFactor: a.justificationFactor || 1,\n    lineHeight: a.lineHeight || null,\n    lineSpacing: a.lineSpacing || 0,\n    link: a.link || null,\n    marginLeft: a.marginLeft || a.margin || 0,\n    marginRight: a.marginRight || a.margin || 0,\n    opacity: a.opacity,\n    paddingTop: a.paddingTop || a.padding || 0,\n    paragraphSpacing: a.paragraphSpacing || 0,\n    script: a.script || null,\n    shrinkFactor: a.shrinkFactor || 0,\n    strike: a.strike || false,\n    strikeColor: a.strikeColor || a.color || 'black',\n    strikeStyle: a.strikeStyle || 'solid',\n    stroke: a.stroke || false,\n    underline: a.underline || false,\n    underlineColor: a.underlineColor || a.color || 'black',\n    underlineStyle: a.underlineStyle || 'solid',\n    verticalAlign: a.verticalAlign || null,\n    wordSpacing: a.wordSpacing || 0,\n    yOffset: a.yOffset || 0\n  };\n};\n\n/**\n * Apply default style to run\n *\n * @param {Run} run run\n * @returns {Run} run with styles\n */\nconst applyRunStyles = run => {\n  const attributes = applyAttributes(run.attributes);\n  return Object.assign({}, run, {\n    attributes\n  });\n};\n\n/**\n * Apply default attributes for an attributed string\n */\nconst applyDefaultStyles = () => {\n  /**\n   * @param {AttributedString} attributedString attributed string\n   * @returns {AttributedString} attributed string\n   */\n  return attributedString => {\n    const string = attributedString.string || '';\n    const runs = (attributedString.runs || []).map(applyRunStyles);\n    return {\n      string,\n      runs\n    };\n  };\n};\n\n/* eslint-disable no-restricted-syntax */\n\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n */\n\n/**\n * Apply scaling and yOffset for verticalAlign 'sub' and 'super'.\n */\nconst verticalAlignment = () => {\n  /**\n   * @param {AttributedString} attributedString attributed string\n   * @returns {AttributedString} attributed string\n   */\n  return attributedString => {\n    attributedString.runs.forEach(run => {\n      const {\n        attributes\n      } = run;\n      const {\n        verticalAlign\n      } = attributes;\n      if (verticalAlign === 'sub') {\n        attributes.yOffset = -0.2;\n      } else if (verticalAlign === 'super') {\n        attributes.yOffset = 0.4;\n      }\n    });\n    return attributedString;\n  };\n};\n\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n * @typedef {import('../types.js').Run} Run\n */\n\nconst bidi$1 = bidiFactory();\n\n/**\n * @param {Run[]} runs\n * @returns {number[]} bidi levels\n */\nconst getBidiLevels = runs => {\n  return runs.reduce((acc, run) => {\n    const length = run.end - run.start;\n    const levels = repeat(run.attributes.bidiLevel, length);\n    return acc.concat(levels);\n  }, []);\n};\n\n/**\n * Perform bidi mirroring\n */\nconst mirrorString = () => {\n  /**\n   * @param {AttributedString} attributedString attributed string\n   * @returns {AttributedString} attributed string\n   */\n  return attributedString => {\n    const levels = getBidiLevels(attributedString.runs);\n    let updatedString = '';\n    attributedString.string.split('').forEach((char, index) => {\n      const isRTL = levels[index] % 2 === 1;\n      const mirroredChar = isRTL ? bidi$1.getMirroredCharacter(attributedString.string.charAt(index)) : null;\n      updatedString += mirroredChar || char;\n    });\n    return {\n      ...attributedString,\n      string: updatedString,\n      levels\n    };\n  };\n};\n\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n * @typedef {import('../types.js').Rect} Rect\n */\n\n/**\n * A LayoutEngine is the main object that performs text layout.\n * It accepts an AttributedString and a Container object\n * to layout text into, and uses several helper objects to perform\n * various layout tasks. These objects can be overridden to customize\n * layout behavior.\n *\n * @param {Object} engines engines\n */\nconst layoutEngine = engines => {\n  /**\n   * @param {AttributedString} attributedString attributed string\n   * @param {Rect} container container rect\n   * @param {Object} options layout options\n   * @returns {Object[]} paragraph blocks\n   */\n  return function (attributedString, container, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    const processParagraph = compose(resolveYOffset(), resolveAttachments(), verticalAlignment(), wrapWords(engines, options), generateGlyphs(), mirrorString(), preprocessRuns(engines, options));\n    const processParagraphs = paragraphs => paragraphs.map(processParagraph);\n    return compose(finalizeFragments(engines, options), bidiReordering(), typesetter(engines, options, container), processParagraphs, splitParagraphs(), applyDefaultStyles())(attributedString);\n  };\n};\nconst bidi = bidiFactory();\n\n/**\n * @param  {Object}  layout options\n * @param  {Object}  attributed string\n * @return {Object} attributed string\n */\nconst bidiEngine = () => attributedString => {\n  var _attributedString$run;\n  const {\n    string\n  } = attributedString;\n  const direction = (_attributedString$run = attributedString.runs[0]) === null || _attributedString$run === void 0 ? void 0 : _attributedString$run.attributes.direction;\n  const {\n    levels\n  } = bidi.getEmbeddingLevels(string, direction);\n  let lastLevel = null;\n  let lastIndex = 0;\n  let index = 0;\n  const res = [];\n  for (let i = 0; i < levels.length; i += 1) {\n    const level = levels[i];\n    if (level !== lastLevel) {\n      if (lastLevel !== null) {\n        res.push({\n          start: lastIndex,\n          end: index,\n          attributes: {\n            bidiLevel: lastLevel\n          }\n        });\n      }\n      lastIndex = index;\n      lastLevel = level;\n    }\n    index += 1;\n  }\n  if (lastIndex < string.length) {\n    res.push({\n      start: lastIndex,\n      end: string.length,\n      attributes: {\n        bidiLevel: lastLevel\n      }\n    });\n  }\n  return {\n    string,\n    runs: res\n  };\n};\n\n/* eslint-disable no-plusplus */\nconst INFINITY = 10000;\n\n/**\n * @param {Object[]} subnodes\n * @param {number[]} widths\n * @param {number} lineNumber\n * @returns {number}\n */\nconst getNextBreakpoint = (subnodes, widths, lineNumber) => {\n  let position = null;\n  let minimumBadness = Infinity;\n  const sum = {\n    width: 0,\n    stretch: 0,\n    shrink: 0\n  };\n  const lineLength = widths[Math.min(lineNumber, widths.length - 1)];\n  const calculateRatio = node => {\n    if (sum.width < lineLength) {\n      return sum.stretch - node.stretch > 0 ? (lineLength - sum.width) / sum.stretch : INFINITY;\n    }\n    if (sum.width > lineLength) {\n      return sum.shrink - node.shrink > 0 ? (lineLength - sum.width) / sum.shrink : INFINITY;\n    }\n    return 0;\n  };\n  for (let i = 0; i < subnodes.length; i += 1) {\n    const node = subnodes[i];\n    if (node.type === 'box') {\n      sum.width += node.width;\n    } else if (node.type === 'glue') {\n      sum.width += node.width;\n      sum.stretch += node.stretch;\n      sum.shrink += node.shrink;\n    }\n    if (sum.width - sum.shrink > lineLength) {\n      if (position === null) {\n        let j = i === 0 ? i + 1 : i;\n        while (j < subnodes.length && (subnodes[j].type === 'glue' || subnodes[j].type === 'penalty')) {\n          j++;\n        }\n        position = j - 1;\n      }\n      break;\n    }\n    if (node.type === 'penalty' || node.type === 'glue') {\n      const ratio = calculateRatio(node);\n      const penalty = node.type === 'penalty' ? node.penalty : 0;\n      const badness = 100 * Math.abs(ratio) ** 3 + penalty;\n      if (minimumBadness >= badness) {\n        position = i;\n        minimumBadness = badness;\n      }\n    }\n  }\n  return sum.width - sum.shrink > lineLength ? position : null;\n};\n\n/**\n * @param {Object[]} nodes\n * @param {number[]} widths\n */\nconst applyBestFit = (nodes, widths) => {\n  let count = 0;\n  let lineNumber = 0;\n  let subnodes = nodes;\n  const breakpoints = [{\n    position: 0\n  }];\n  while (subnodes.length > 0) {\n    const breakpoint = getNextBreakpoint(subnodes, widths, lineNumber);\n    if (breakpoint !== null) {\n      count += breakpoint;\n      breakpoints.push({\n        position: count\n      });\n      subnodes = subnodes.slice(breakpoint + 1, subnodes.length);\n      count++;\n      lineNumber++;\n    } else {\n      subnodes = [];\n    }\n  }\n  return breakpoints;\n};\n\n/* eslint-disable no-param-reassign */\n/* eslint-disable max-classes-per-file */\nclass Node {\n  constructor(data) {\n    this.prev = null;\n    this.next = null;\n    this.data = data;\n  }\n  toString() {\n    return this.data.toString();\n  }\n}\nclass LinkedList {\n  constructor() {\n    this.head = null;\n    this.tail = null;\n    this.listSize = 0;\n    this.listLength = 0;\n  }\n  isLinked(node) {\n    return !(node && node.prev === null && node.next === null && this.tail !== node && this.head !== node || this.isEmpty());\n  }\n  size() {\n    return this.listSize;\n  }\n  isEmpty() {\n    return this.listSize === 0;\n  }\n  first() {\n    return this.head;\n  }\n  last() {\n    return this.last;\n  }\n  toString() {\n    return this.toArray().toString();\n  }\n  toArray() {\n    let node = this.head;\n    const result = [];\n    while (node !== null) {\n      result.push(node);\n      node = node.next;\n    }\n    return result;\n  }\n  forEach(fun) {\n    let node = this.head;\n    while (node !== null) {\n      fun(node);\n      node = node.next;\n    }\n  }\n  contains(n) {\n    let node = this.head;\n    if (!this.isLinked(n)) {\n      return false;\n    }\n    while (node !== null) {\n      if (node === n) {\n        return true;\n      }\n      node = node.next;\n    }\n    return false;\n  }\n  at(i) {\n    let node = this.head;\n    let index = 0;\n    if (i >= this.listLength || i < 0) {\n      return null;\n    }\n    while (node !== null) {\n      if (i === index) {\n        return node;\n      }\n      node = node.next;\n      index += 1;\n    }\n    return null;\n  }\n  insertAfter(node, newNode) {\n    if (!this.isLinked(node)) {\n      return this;\n    }\n    newNode.prev = node;\n    newNode.next = node.next;\n    if (node.next === null) {\n      this.tail = newNode;\n    } else {\n      node.next.prev = newNode;\n    }\n    node.next = newNode;\n    this.listSize += 1;\n    return this;\n  }\n  insertBefore(node, newNode) {\n    if (!this.isLinked(node)) {\n      return this;\n    }\n    newNode.prev = node.prev;\n    newNode.next = node;\n    if (node.prev === null) {\n      this.head = newNode;\n    } else {\n      node.prev.next = newNode;\n    }\n    node.prev = newNode;\n    this.listSize += 1;\n    return this;\n  }\n  push(node) {\n    if (this.head === null) {\n      this.unshift(node);\n    } else {\n      this.insertAfter(this.tail, node);\n    }\n    return this;\n  }\n  unshift(node) {\n    if (this.head === null) {\n      this.head = node;\n      this.tail = node;\n      node.prev = null;\n      node.next = null;\n      this.listSize += 1;\n    } else {\n      this.insertBefore(this.head, node);\n    }\n    return this;\n  }\n  remove(node) {\n    if (!this.isLinked(node)) {\n      return this;\n    }\n    if (node.prev === null) {\n      this.head = node.next;\n    } else {\n      node.prev.next = node.next;\n    }\n    if (node.next === null) {\n      this.tail = node.prev;\n    } else {\n      node.next.prev = node.prev;\n    }\n    this.listSize -= 1;\n    return this;\n  }\n  pop() {\n    const node = this.tail;\n    this.tail.prev.next = null;\n    this.tail = this.tail.prev;\n    this.listSize -= 1;\n    node.prev = null;\n    node.next = null;\n    return node;\n  }\n  shift() {\n    const node = this.head;\n    this.head.next.prev = null;\n    this.head = this.head.next;\n    this.listSize -= 1;\n    node.prev = null;\n    node.next = null;\n    return node;\n  }\n}\nLinkedList.Node = Node;\n\n/* eslint-disable no-restricted-properties */\n\n/**\n * @param {Object[]} nodes\n * @param {number[]} lines\n * @param {Object} settings\n * @preserve Knuth and Plass line breaking algorithm in JavaScript\n *\n * Licensed under the new BSD License.\n * Copyright 2009-2010, Bram Stein\n * All rights reserved.\n */\nconst linebreak = (nodes, lines, settings) => {\n  const options = {\n    demerits: {\n      line: settings && settings.demerits && settings.demerits.line || 10,\n      flagged: settings && settings.demerits && settings.demerits.flagged || 100,\n      fitness: settings && settings.demerits && settings.demerits.fitness || 3000\n    },\n    tolerance: settings && settings.tolerance || 3\n  };\n  const activeNodes = new LinkedList();\n  const sum = {\n    width: 0,\n    stretch: 0,\n    shrink: 0\n  };\n  const lineLengths = lines;\n  const breaks = [];\n  let tmp = {\n    data: {\n      demerits: Infinity\n    }\n  };\n  function breakpoint(position, demerits, ratio, line, fitnessClass, totals, previous) {\n    return {\n      position,\n      demerits,\n      ratio,\n      line,\n      fitnessClass,\n      totals: totals || {\n        width: 0,\n        stretch: 0,\n        shrink: 0\n      },\n      previous\n    };\n  }\n  function computeCost(start, end, active, currentLine) {\n    let width = sum.width - active.totals.width;\n    let stretch = 0;\n    let shrink = 0;\n    // If the current line index is within the list of linelengths, use it, otherwise use\n    // the last line length of the list.\n    const lineLength = currentLine < lineLengths.length ? lineLengths[currentLine - 1] : lineLengths[lineLengths.length - 1];\n    if (nodes[end].type === 'penalty') {\n      width += nodes[end].width;\n    }\n    if (width < lineLength) {\n      // Calculate the stretch ratio\n      stretch = sum.stretch - active.totals.stretch;\n      if (stretch > 0) {\n        return (lineLength - width) / stretch;\n      }\n      return linebreak.infinity;\n    }\n    if (width > lineLength) {\n      // Calculate the shrink ratio\n      shrink = sum.shrink - active.totals.shrink;\n      if (shrink > 0) {\n        return (lineLength - width) / shrink;\n      }\n      return linebreak.infinity;\n    }\n\n    // perfect match\n    return 0;\n  }\n\n  // Add width, stretch and shrink values from the current\n  // break point up to the next box or forced penalty.\n  function computeSum(breakPointIndex) {\n    const result = {\n      width: sum.width,\n      stretch: sum.stretch,\n      shrink: sum.shrink\n    };\n    for (let i = breakPointIndex; i < nodes.length; i += 1) {\n      if (nodes[i].type === 'glue') {\n        result.width += nodes[i].width;\n        result.stretch += nodes[i].stretch;\n        result.shrink += nodes[i].shrink;\n      } else if (nodes[i].type === 'box' || nodes[i].type === 'penalty' && nodes[i].penalty === -linebreak.infinity && i > breakPointIndex) {\n        break;\n      }\n    }\n    return result;\n  }\n\n  // The main loop of the algorithm\n  // eslint-disable-next-line no-shadow\n  function mainLoop(node, index, nodes) {\n    let active = activeNodes.first();\n    let next = null;\n    let ratio = 0;\n    let demerits = 0;\n    /**\n     * @type {Object[]}\n     */\n    let candidates = [];\n    let badness;\n    let currentLine = 0;\n    let tmpSum;\n    let currentClass = 0;\n    let fitnessClass;\n    /**\n     * @type {Object}\n     */\n    let candidate;\n    let newNode;\n\n    // The inner loop iterates through all the active nodes with line < currentLine and then\n    // breaks out to insert the new active node candidates before looking at the next active\n    // nodes for the next lines. The result of this is that the active node list is always\n    // sorted by line number.\n    while (active !== null) {\n      candidates = [{\n        demerits: Infinity\n      }, {\n        demerits: Infinity\n      }, {\n        demerits: Infinity\n      }, {\n        demerits: Infinity\n      }];\n\n      // Iterate through the linked list of active nodes to find new potential active nodes\n      // and deactivate current active nodes.\n      while (active !== null) {\n        next = active.next;\n        currentLine = active.data.line + 1;\n        ratio = computeCost(active.data.position, index, active.data, currentLine);\n\n        // Deactive nodes when the distance between the current active node and the\n        // current node becomes too large (i.e. it exceeds the stretch limit and the stretch\n        // ratio becomes negative) or when the current node is a forced break (i.e. the end\n        // of the paragraph when we want to remove all active nodes, but possibly have a final\n        // candidate active node---if the paragraph can be set using the given tolerance value.)\n        if (ratio < -1 || node.type === 'penalty' && node.penalty === -linebreak.infinity) {\n          activeNodes.remove(active);\n        }\n\n        // If the ratio is within the valid range of -1 <= ratio <= tolerance calculate the\n        // total demerits and record a candidate active node.\n        if (ratio >= -1 && ratio <= options.tolerance) {\n          badness = 100 * Math.pow(Math.abs(ratio), 3);\n\n          // Positive penalty\n          if (node.type === 'penalty' && node.penalty >= 0) {\n            demerits = Math.pow(options.demerits.line + badness, 2) + Math.pow(node.penalty, 2);\n            // Negative penalty but not a forced break\n          } else if (node.type === 'penalty' && node.penalty !== -linebreak.infinity) {\n            demerits = Math.pow(options.demerits.line + badness, 2) - Math.pow(node.penalty, 2);\n            // All other cases\n          } else {\n            demerits = Math.pow(options.demerits.line + badness, 2);\n          }\n          if (node.type === 'penalty' && nodes[active.data.position].type === 'penalty') {\n            demerits += options.demerits.flagged * node.flagged * nodes[active.data.position].flagged;\n          }\n\n          // Calculate the fitness class for this candidate active node.\n          if (ratio < -0.5) {\n            currentClass = 0;\n          } else if (ratio <= 0.5) {\n            currentClass = 1;\n          } else if (ratio <= 1) {\n            currentClass = 2;\n          } else {\n            currentClass = 3;\n          }\n\n          // Add a fitness penalty to the demerits if the fitness classes of two adjacent lines\n          // differ too much.\n          if (Math.abs(currentClass - active.data.fitnessClass) > 1) {\n            demerits += options.demerits.fitness;\n          }\n\n          // Add the total demerits of the active node to get the total demerits of this candidate node.\n          demerits += active.data.demerits;\n\n          // Only store the best candidate for each fitness class\n          if (demerits < candidates[currentClass].demerits) {\n            candidates[currentClass] = {\n              active,\n              demerits,\n              ratio\n            };\n          }\n        }\n        active = next;\n\n        // Stop iterating through active nodes to insert new candidate active nodes in the active list\n        // before moving on to the active nodes for the next line.\n        // TODO: The Knuth and Plass paper suggests a conditional for currentLine < j0. This means paragraphs\n        // with identical line lengths will not be sorted by line number. Find out if that is a desirable outcome.\n        // For now I left this out, as it only adds minimal overhead to the algorithm and keeping the active node\n        // list sorted has a higher priority.\n        if (active !== null && active.data.line >= currentLine) {\n          break;\n        }\n      }\n      tmpSum = computeSum(index);\n      for (fitnessClass = 0; fitnessClass < candidates.length; fitnessClass += 1) {\n        candidate = candidates[fitnessClass];\n        if (candidate.demerits < Infinity) {\n          newNode = new LinkedList.Node(breakpoint(index, candidate.demerits, candidate.ratio, candidate.active.data.line + 1, fitnessClass, tmpSum, candidate.active));\n          if (active !== null) {\n            activeNodes.insertBefore(active, newNode);\n          } else {\n            activeNodes.push(newNode);\n          }\n        }\n      }\n    }\n  }\n\n  // Add an active node for the start of the paragraph.\n  activeNodes.push(new LinkedList.Node(breakpoint(0, 0, 0, 0, 0, undefined, null)));\n\n  // eslint-disable-next-line no-shadow\n  nodes.forEach((node, index, nodes) => {\n    if (node.type === 'box') {\n      sum.width += node.width;\n    } else if (node.type === 'glue') {\n      if (index > 0 && nodes[index - 1].type === 'box') {\n        mainLoop(node, index, nodes);\n      }\n      sum.width += node.width;\n      sum.stretch += node.stretch;\n      sum.shrink += node.shrink;\n    } else if (node.type === 'penalty' && node.penalty !== linebreak.infinity) {\n      mainLoop(node, index, nodes);\n    }\n  });\n  if (activeNodes.size() !== 0) {\n    // Find the best active node (the one with the least total demerits.)\n    activeNodes.forEach(node => {\n      if (node.data.demerits < tmp.data.demerits) {\n        tmp = node;\n      }\n    });\n    while (tmp !== null) {\n      breaks.push({\n        position: tmp.data.position,\n        ratio: tmp.data.ratio\n      });\n      tmp = tmp.data.previous;\n    }\n    return breaks.reverse();\n  }\n  return [];\n};\nlinebreak.infinity = 10000;\nlinebreak.glue = (width, value, stretch, shrink) => ({\n  type: 'glue',\n  value,\n  width,\n  stretch,\n  shrink\n});\nlinebreak.box = function (width, value, hyphenated) {\n  if (hyphenated === void 0) {\n    hyphenated = false;\n  }\n  return {\n    type: 'box',\n    width,\n    value,\n    hyphenated\n  };\n};\nlinebreak.penalty = (width, penalty, flagged) => ({\n  type: 'penalty',\n  width,\n  penalty,\n  flagged\n});\n\n/**\n * @typedef {import('../types.js').Run} Run\n */\n\n/**\n * Add scalar to run\n *\n * @param {number} n scalar\n * @param {Run} run run\n * @returns {Run} added run\n */\nconst add = (n, run) => {\n  const start = run.start + n;\n  const end = run.end + n;\n  return Object.assign({}, run, {\n    start,\n    end\n  });\n};\n\n/**\n * @typedef {import('../types.js').Run} Run\n */\n\n/**\n * Get run length\n *\n * @param {Run} run run\n * @returns {number} length\n */\nconst length = run => {\n  return run.end - run.start;\n};\n\n/**\n * @typedef {import('../types.js').Run} Run\n */\n\n/**\n * Concats two runs into one\n *\n * @param {Run} runA first run\n * @param {Run} runB second run\n * @returns {Run} concatenated run\n */\nconst concat = (runA, runB) => {\n  const end = runA.end + length(runB);\n  const glyphs = (runA.glyphs || []).concat(runB.glyphs || []);\n  const positions = (runA.positions || []).concat(runB.positions || []);\n  const attributes = Object.assign({}, runA.attributes, runB.attributes);\n  const runAIndices = runA.glyphIndices || [];\n  const runALastIndex = last(runAIndices) || 0;\n  const runBIndices = (runB.glyphIndices || []).map(i => i + runALastIndex + 1);\n  const glyphIndices = normalize(runAIndices.concat(runBIndices));\n  return Object.assign({}, runA, {\n    end,\n    glyphs,\n    positions,\n    attributes,\n    glyphIndices\n  });\n};\n\n/**\n * @typedef {import('../types.js').Glyph} Glyph\n * @typedef {import('../types.js').Run} Run\n */\n\n/**\n * Insert glyph to run in the given index\n *\n * @param {number} index index\n * @param {Glyph} glyph glyph\n * @param {Run} run run\n * @returns {Run} run with glyph\n */\nconst insertGlyph$1 = (index, glyph, run) => {\n  if (!glyph) return run;\n\n  // Split resolves ligature splitting in case new glyph breaks some\n  const leadingRun = slice$1(0, index, run);\n  const trailingRun = slice$1(index, Infinity, run);\n  return concat(append$1(glyph, leadingRun), trailingRun);\n};\n\n/**\n * Insert either glyph or code point to run in the given index\n *\n * @param {number} index index\n * @param {Glyph | number} value glyph or codePoint\n * @param {Run} run run\n * @returns {Run} run with glyph\n */\nconst insert = (index, value, run) => {\n  const font = getFont(run);\n  const glyph = isNumber(value) ? fromCodePoint(value, font) : value;\n  return insertGlyph$1(index, glyph, run);\n};\n\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n */\n\n/**\n * Get run index at char index\n *\n * @param {number} n char index\n * @param {AttributedString} string attributed string\n * @returns {number} run index\n */\nconst runIndexAt = (n, string) => {\n  return runIndexAt$1(n, string.runs);\n};\n\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n * @typedef {import('../types.js').Glyph} Glyph\n */\n\n/**\n * Insert glyph into attributed string\n *\n * @param {number} index index\n * @param {Glyph} glyph glyph\n * @param {AttributedString} attributedString attributed string\n * @returns {AttributedString} attributed string with new glyph\n */\nconst insertGlyph = (index, glyph, attributedString) => {\n  const runIndex = runIndexAt(index, attributedString);\n\n  // Add glyph to the end if run index invalid\n  if (runIndex === -1) return append(glyph, attributedString);\n  const codePoints = (glyph === null || glyph === void 0 ? void 0 : glyph.codePoints) || [];\n  const string = attributedString.string.slice(0, index) + stringFromCodePoints(codePoints) + attributedString.string.slice(index);\n  const runs = attributedString.runs.map((run, i) => {\n    if (i === runIndex) return insert(index - run.start, glyph, run);\n    if (i > runIndex) return add(codePoints.length, run);\n    return run;\n  });\n  return Object.assign({}, attributedString, {\n    string,\n    runs\n  });\n};\n\n/**\n * @typedef {import('../types.js').Run} Run\n */\n\n/**\n * Advance width between two string indices\n *\n * @param {number} start glyph index\n * @param {number} end glyph index\n * @param {Run} run run\n * @returns {number} advanced width run\n */\nconst advanceWidthBetween$1 = (start, end, run) => {\n  const runStart = run.start || 0;\n  const glyphStartIndex = Math.max(0, glyphIndexAt(start - runStart, run));\n  const glyphEndIndex = Math.max(0, glyphIndexAt(end - runStart, run));\n  const positions = (run.positions || []).slice(glyphStartIndex, glyphEndIndex);\n  return advanceWidth$2(positions);\n};\n\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n */\n\n/**\n * Advance width between start and end\n * Does not consider ligature splitting for the moment.\n * Check performance impact on supporting this\n *\n * @param {number} start offset\n * @param {number} end offset\n * @param {AttributedString} attributedString\n * @returns {number} advance width\n */\nconst advanceWidthBetween = (start, end, attributedString) => {\n  const runs = filter(start, end, attributedString.runs);\n  return runs.reduce((acc, run) => acc + advanceWidthBetween$1(start, end, run), 0);\n};\n\n/**\n * @typedef {import('../../types.js').AttributedString} AttributedString\n * @typedef {import('../../types.js').Attributes} Attributes\n */\n\nconst HYPHEN = 0x002d;\nconst TOLERANCE_STEPS = 5;\nconst TOLERANCE_LIMIT = 50;\nconst opts = {\n  width: 3,\n  stretch: 6,\n  shrink: 9\n};\n\n/**\n * Slice attributed string to many lines\n *\n * @param {AttributedString} string attributed string\n * @param {Object[]} nodes\n * @param {Object[]} breaks\n * @returns {AttributedString[]} attributed strings\n */\nconst breakLines = (string, nodes, breaks) => {\n  let start = 0;\n  let end = null;\n  const lines = breaks.reduce((acc, breakPoint) => {\n    const node = nodes[breakPoint.position];\n    const prevNode = nodes[breakPoint.position - 1];\n\n    // Last breakpoint corresponds to K&P mandatory final glue\n    if (breakPoint.position === nodes.length - 1) return acc;\n    let line;\n    if (node.type === 'penalty') {\n      end = prevNode.value.end;\n      line = slice(start, end, string);\n      line = insertGlyph(line.length, HYPHEN, line);\n    } else {\n      end = node.value.end;\n      line = slice(start, end, string);\n    }\n    start = end;\n    return [...acc, line];\n  }, []);\n\n  // Last line\n  lines.push(slice(start, string.string.length, string));\n  return lines;\n};\n\n/**\n * Return Knuth & Plass nodes based on line and previously calculated syllables\n *\n * @param {AttributedString} attributedString attributed string\n * @param {Object} args attributed string args\n * @param {Object} options layout options\n * @returns {Object[]} attributed strings\n */\nconst getNodes = (attributedString, _ref, options) => {\n  let {\n    align\n  } = _ref;\n  let start = 0;\n  const hyphenWidth = 5;\n  const {\n    syllables\n  } = attributedString;\n  const hyphenPenalty = options.hyphenationPenalty || (align === 'justify' ? 100 : 600);\n  const result = syllables.reduce((acc, s, index) => {\n    const width = advanceWidthBetween(start, start + s.length, attributedString);\n    if (s.trim() === '') {\n      const stretch = width * opts.width / opts.stretch;\n      const shrink = width * opts.width / opts.shrink;\n      const value = {\n        start,\n        end: start + s.length\n      };\n      acc.push(linebreak.glue(width, value, stretch, shrink));\n    } else {\n      const hyphenated = syllables[index + 1] !== ' ';\n      const value = {\n        start,\n        end: start + s.length\n      };\n      acc.push(linebreak.box(width, value, hyphenated));\n      if (syllables[index + 1] && hyphenated) {\n        acc.push(linebreak.penalty(hyphenWidth, hyphenPenalty, 1));\n      }\n    }\n    start += s.length;\n    return acc;\n  }, []);\n  result.push(linebreak.glue(0, null, linebreak.infinity, 0));\n  result.push(linebreak.penalty(0, -linebreak.infinity, 1));\n  return result;\n};\n\n/**\n * @param {AttributedString} attributedString attributed string\n * @returns {Attributes} styles\n */\nconst getStyles = attributedString => {\n  var _attributedString$run, _attributedString$run2;\n  return ((_attributedString$run = attributedString.runs) === null || _attributedString$run === void 0 ? void 0 : (_attributedString$run2 = _attributedString$run[0]) === null || _attributedString$run2 === void 0 ? void 0 : _attributedString$run2.attributes) || {};\n};\n\n/**\n * Performs Knuth & Plass line breaking algorithm\n * Fallbacks to best fit algorithm if latter not successful\n *\n * @param {Object} options layout options\n */\nconst linebreaker = options => {\n  /**\n   * @param {AttributedString} attributedString attributed string\n   * @param {number[]} availableWidths available widths\n   * @returns {AttributedString[]} attributed strings\n   */\n  return (attributedString, availableWidths) => {\n    let tolerance = options.tolerance || 4;\n    const style = getStyles(attributedString);\n    const nodes = getNodes(attributedString, style, options);\n\n    /** @type {Object[]} */\n    let breaks = linebreak(nodes, availableWidths, {\n      tolerance\n    });\n\n    // Try again with a higher tolerance if the line breaking failed.\n    while (breaks.length === 0 && tolerance < TOLERANCE_LIMIT) {\n      tolerance += TOLERANCE_STEPS;\n      breaks = linebreak(nodes, availableWidths, {\n        tolerance\n      });\n    }\n    if (breaks.length === 0 || breaks.length === 1 && breaks[0].position === 0) {\n      breaks = applyBestFit(nodes, availableWidths);\n    }\n    return breakLines(attributedString, nodes, breaks.slice(1));\n  };\n};\nconst WHITESPACE_PRIORITY = 1;\nconst LETTER_PRIORITY = 2;\nconst EXPAND_WHITESPACE_FACTOR = {\n  before: 0.5,\n  after: 0.5,\n  priority: WHITESPACE_PRIORITY,\n  unconstrained: false\n};\nconst EXPAND_CHAR_FACTOR = {\n  before: 0.14453125,\n  // 37/256\n  after: 0.14453125,\n  priority: LETTER_PRIORITY,\n  unconstrained: false\n};\nconst SHRINK_WHITESPACE_FACTOR = {\n  before: -0.04296875,\n  // -11/256\n  after: -0.04296875,\n  priority: WHITESPACE_PRIORITY,\n  unconstrained: false\n};\nconst SHRINK_CHAR_FACTOR = {\n  before: -0.04296875,\n  after: -0.04296875,\n  priority: LETTER_PRIORITY,\n  unconstrained: false\n};\nconst getCharFactor = (direction, options) => {\n  const expandCharFactor = options.expandCharFactor || {};\n  const shrinkCharFactor = options.shrinkCharFactor || {};\n  return direction === 'GROW' ? Object.assign({}, EXPAND_CHAR_FACTOR, expandCharFactor) : Object.assign({}, SHRINK_CHAR_FACTOR, shrinkCharFactor);\n};\nconst getWhitespaceFactor = (direction, options) => {\n  const expandWhitespaceFactor = options.expandWhitespaceFactor || {};\n  const shrinkWhitespaceFactor = options.shrinkWhitespaceFactor || {};\n  return direction === 'GROW' ? Object.assign({}, EXPAND_WHITESPACE_FACTOR, expandWhitespaceFactor) : Object.assign({}, SHRINK_WHITESPACE_FACTOR, shrinkWhitespaceFactor);\n};\nconst factor = (direction, options) => glyphs => {\n  const charFactor = getCharFactor(direction, options);\n  const whitespaceFactor = getWhitespaceFactor(direction, options);\n  const factors = [];\n  for (let index = 0; index < glyphs.length; index += 1) {\n    let f;\n    const glyph = glyphs[index];\n    if (isWhiteSpace(glyph)) {\n      f = Object.assign({}, whitespaceFactor);\n      if (index === glyphs.length - 1) {\n        f.before = 0;\n        if (index > 0) {\n          factors[index - 1].after = 0;\n        }\n      }\n    } else if (glyph.isMark && index > 0) {\n      f = Object.assign({}, factors[index - 1]);\n      f.before = 0;\n      factors[index - 1].after = 0;\n    } else {\n      f = Object.assign({}, charFactor);\n    }\n    factors.push(f);\n  }\n  return factors;\n};\nconst getFactors = (gap, line, options) => {\n  const direction = gap > 0 ? 'GROW' : 'SHRINK';\n  const getFactor = factor(direction, options);\n  const factors = line.runs.reduce((acc, run) => {\n    return acc.concat(getFactor(run.glyphs));\n  }, []);\n  factors[0].before = 0;\n  factors[factors.length - 1].after = 0;\n  return factors;\n};\n\n/* eslint-disable no-multi-assign */\nconst KASHIDA_PRIORITY = 0;\nconst NULL_PRIORITY = 3;\nconst getDistances = (gap, factors) => {\n  let total = 0;\n  const priorities = [];\n  const unconstrained = [];\n  for (let priority = KASHIDA_PRIORITY; priority <= NULL_PRIORITY; priority += 1) {\n    priorities[priority] = unconstrained[priority] = 0;\n  }\n\n  // sum the factors at each priority\n  for (let j = 0; j < factors.length; j += 1) {\n    const f = factors[j];\n    const sum = f.before + f.after;\n    total += sum;\n    priorities[f.priority] += sum;\n    if (f.unconstrained) {\n      unconstrained[f.priority] += sum;\n    }\n  }\n\n  // choose the priorities that need to be applied\n  let highestPriority = -1;\n  let highestPrioritySum = 0;\n  let remainingGap = gap;\n  let priority;\n  for (priority = KASHIDA_PRIORITY; priority <= NULL_PRIORITY; priority += 1) {\n    const prioritySum = priorities[priority];\n    if (prioritySum !== 0) {\n      if (highestPriority === -1) {\n        highestPriority = priority;\n        highestPrioritySum = prioritySum;\n      }\n\n      // if this priority covers the remaining gap, we're done\n      if (Math.abs(remainingGap) <= Math.abs(prioritySum)) {\n        priorities[priority] = remainingGap / prioritySum;\n        unconstrained[priority] = 0;\n        remainingGap = 0;\n        break;\n      }\n\n      // mark that we need to use 100% of the adjustment from\n      // this priority, and subtract the space that it consumes\n      priorities[priority] = 1;\n      remainingGap -= prioritySum;\n\n      // if this priority has unconstrained glyphs, let them consume the remaining space\n      if (unconstrained[priority] !== 0) {\n        unconstrained[priority] = remainingGap / unconstrained[priority];\n        remainingGap = 0;\n        break;\n      }\n    }\n  }\n\n  // zero out remaining priorities (if any)\n  for (let p = priority + 1; p <= NULL_PRIORITY; p += 1) {\n    priorities[p] = 0;\n    unconstrained[p] = 0;\n  }\n\n  // if there is still space left over, assign it to the highest priority that we saw.\n  // this violates their factors, but it only happens in extreme cases\n  if (remainingGap > 0 && highestPriority > -1) {\n    priorities[highestPriority] = (highestPrioritySum + (gap - total)) / highestPrioritySum;\n  }\n\n  // create and return an array of distances to add to each glyph's advance\n  const distances = [];\n  for (let index = 0; index < factors.length; index += 1) {\n    // the distance to add to this glyph is the sum of the space to add\n    // after this glyph, and the space to add before the next glyph\n    const f = factors[index];\n    const next = factors[index + 1];\n    let dist = f.after * priorities[f.priority];\n    if (next) {\n      dist += next.before * priorities[next.priority];\n    }\n\n    // if this glyph is unconstrained, add the unconstrained distance as well\n    if (f.unconstrained) {\n      dist += f.after * unconstrained[f.priority];\n      if (next) {\n        dist += next.before * unconstrained[next.priority];\n      }\n    }\n    distances.push(dist);\n  }\n  return distances;\n};\n\n/* eslint-disable consistent-return */\n/* eslint-disable no-plusplus */\n/* eslint-disable no-restricted-syntax */\n\n/**\n * Adjust run positions by given distances\n *\n * @param {number[]} distances\n * @param {Object} line\n * @returns {Object} line\n */\nconst justifyLine = (distances, line) => {\n  let index = 0;\n  for (const run of line.runs) {\n    for (const position of run.positions) {\n      position.xAdvance += distances[index++];\n    }\n  }\n  return line;\n};\n\n/**\n * A JustificationEngine is used by a Typesetter to perform line fragment\n * justification. This implementation is based on a description of Apple's\n * justification algorithm from a PDF in the Apple Font Tools package.\n *\n * // TODO: Make it immutable\n *\n * @param {Object} options layout options\n */\nconst justification = options => {\n  /**\n   * @param {Object} line\n   * @returns {Object} line\n   */\n  return line => {\n    const gap = line.box.width - advanceWidth(line);\n    if (gap === 0) return; // Exact fit\n\n    const factors = getFactors(gap, line, options);\n    const distances = getDistances(gap, factors);\n    return justifyLine(distances, line);\n  };\n};\n\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n */\n\n/**\n * Returns attributed string ascent\n *\n * @param {AttributedString} attributedString attributed string\n * @returns {number} ascent\n */\nconst ascent = attributedString => {\n  const reducer = (acc, run) => Math.max(acc, ascent$1(run));\n  return attributedString.runs.reduce(reducer, 0);\n};\n\n/* eslint-disable no-param-reassign */\n\n// The base font size used for calculating underline thickness.\nconst BASE_FONT_SIZE = 12;\n\n/**\n * A TextDecorationEngine is used by a Typesetter to generate\n * DecorationLines for a line fragment, including underlines\n * and strikes.\n */\nconst textDecoration = () => lineFragment => {\n  let x = lineFragment.overflowLeft || 0;\n  const overflowRight = lineFragment.overflowRight || 0;\n  const maxX = advanceWidth(lineFragment) - overflowRight;\n  lineFragment.decorationLines = [];\n  for (let i = 0; i < lineFragment.runs.length; i += 1) {\n    const run = lineFragment.runs[i];\n    const width = Math.min(maxX - x, advanceWidth$1(run));\n    const thickness = Math.max(0.5, Math.floor(run.attributes.fontSize / BASE_FONT_SIZE));\n    if (run.attributes.underline) {\n      const rect = {\n        x,\n        y: ascent(lineFragment) + thickness * 2,\n        width,\n        height: thickness\n      };\n      const line = {\n        rect,\n        opacity: run.attributes.opacity,\n        color: run.attributes.underlineColor || 'black',\n        style: run.attributes.underlineStyle || 'solid'\n      };\n      lineFragment.decorationLines.push(line);\n    }\n    if (run.attributes.strike) {\n      const y = ascent(lineFragment) - ascent$1(run) / 3;\n      const rect = {\n        x,\n        y,\n        width,\n        height: thickness\n      };\n      const line = {\n        rect,\n        opacity: run.attributes.opacity,\n        color: run.attributes.strikeColor || 'black',\n        style: run.attributes.strikeStyle || 'solid'\n      };\n      lineFragment.decorationLines.push(line);\n    }\n    x += width;\n  }\n  return lineFragment;\n};\nconst ignoredScripts = ['Common', 'Inherited', 'Unknown'];\n\n/**\n * @typedef {import('../../types.js').AttributedString} AttributedString\n */\n\n/**\n * Resolves unicode script in runs, grouping equal runs together\n */\nconst scriptItemizer = () => {\n  /**\n   * @param {AttributedString} attributedString attributed string\n   * @returns {AttributedString} attributed string\n   */\n  return attributedString => {\n    const {\n      string\n    } = attributedString;\n    let lastScript = 'Unknown';\n    let lastIndex = 0;\n    let index = 0;\n    const res = [];\n    if (!string) return empty();\n    for (let i = 0; i < string.length; i += 1) {\n      const char = string[i];\n      const codePoint = char.codePointAt();\n      const script = unicode.getScript(codePoint);\n      if (script !== lastScript && !ignoredScripts.includes(script)) {\n        if (lastScript !== 'Unknown') {\n          res.push({\n            start: lastIndex,\n            end: index,\n            attributes: {\n              script: lastScript\n            }\n          });\n        }\n        lastIndex = index;\n        lastScript = script;\n      }\n      index += char.length;\n    }\n    if (lastIndex < string.length) {\n      res.push({\n        start: lastIndex,\n        end: string.length,\n        attributes: {\n          script: lastScript\n        }\n      });\n    }\n    return {\n      string,\n      runs: res\n    };\n  };\n};\nconst SOFT_HYPHEN = '\\u00ad';\nconst hyphenator = hyphen(pattern);\n\n/**\n * @param {string} word\n * @returns {string[]} word parts\n */\nconst splitHyphen = word => {\n  return word.split(SOFT_HYPHEN);\n};\nconst cache = {};\n\n/**\n * @param {string} word\n * @returns {string[]} word parts\n */\nconst getParts = word => {\n  const base = word.includes(SOFT_HYPHEN) ? word : hyphenator(word);\n  return splitHyphen(base);\n};\nconst wordHyphenation = () => {\n  /**\n   * @param {string} word word\n   * @returns {string[]} word parts\n   */\n  return word => {\n    const cacheKey = `_${word}`;\n    if (isNil(word)) return [];\n    if (cache[cacheKey]) return cache[cacheKey];\n    cache[cacheKey] = getParts(word);\n    return cache[cacheKey];\n  };\n};\n\n/* eslint-disable no-restricted-syntax */\n\n/**\n * @typedef {import('../../types.js').AttributedString} AttributedString\n * @typedef {import('../../types.js').Run} Run\n */\n\n/**\n * @param {Run} run run\n * @returns {number}\n */\nconst getFontSize = run => {\n  return run.attributes.fontSize || 12;\n};\n\n/**\n * Resolve font runs in an AttributedString, grouping equal\n * runs and performing font substitution where necessary.\n */\nconst fontSubstitution = () => {\n  /**\n   * @param {AttributedString} attributedString attributed string\n   * @returns {AttributedString} attributed string\n   */\n  return attributedString => {\n    const {\n      string,\n      runs\n    } = attributedString;\n    let lastFont = null;\n    let lastIndex = 0;\n    let index = 0;\n    const res = [];\n    if (!string) return empty();\n    for (const run of runs) {\n      const fontSize = getFontSize(run);\n      const defaultFont = run.attributes.font;\n      if (string.length === 0) {\n        res.push({\n          start: 0,\n          end: 0,\n          attributes: {\n            font: defaultFont\n          }\n        });\n        break;\n      }\n      for (const char of string.slice(run.start, run.end)) {\n        const font = defaultFont;\n        if (font !== lastFont) {\n          if (lastFont) {\n            res.push({\n              start: lastIndex,\n              end: index,\n              attributes: {\n                font: lastFont,\n                scale: lastFont ? fontSize / lastFont.unitsPerEm : 0\n              }\n            });\n          }\n          lastFont = font;\n          lastIndex = index;\n        }\n        index += char.length;\n      }\n    }\n    if (lastIndex < string.length) {\n      const fontSize = getFontSize(last(runs));\n      res.push({\n        start: lastIndex,\n        end: string.length,\n        attributes: {\n          font: lastFont,\n          scale: lastFont ? fontSize / lastFont.unitsPerEm : 0\n        }\n      });\n    }\n    return {\n      string,\n      runs: res\n    };\n  };\n};\nexport { bidiEngine as bidi, layoutEngine as default, fontSubstitution, justification, linebreaker, scriptItemizer, textDecoration, wordHyphenation };","map":{"version":3,"names":["isNil","last","repeat","dropLast","dropLast$2","adjust","compose","bidiFactory","unicode","hyphen","pattern","fromFragments","fragments","offset","string","runs","forEach","fragment","push","start","end","length","attributes","defaultHyphenationEngine","word","wrapWords","engines","options","attributedString","_engines$wordHyphenat","_engines","syllables","hyphenateWord","hyphenationCallback","wordHyphenation","call","i","run","words","slice","split","filter","Boolean","j","parts","join","copy","rect","Object","assign","partition","height","a","b","y","crop","result","height$2","paragraph","reduce","acc","block","box","calculateScale","_attributes$font","fontSize","unitsPerEm","font","scale","_run$attributes","index","glyphIndices","value","getFont","slice$2","glyph","codePoints","String","fromCodePoint","layout","undefined","glyphs","glyphIndexAt","_run$glyphIndices","normalize","array","head","map","slice$1","_run$glyphs","_run$glyphs2","runScale","startIndex","endIndex","startGlyph","endGlyph","startOffset","startGlyphs","Infinity","endOffset","endGlyphs","sliceStart","Math","min","glyphPosition","g","xAdvance","advanceWidth","startPositions","positions","endPositions","flat","runIndexAt$1","n","findIndex","max","subtract","sliceRuns","sliceFirstRun","sliceLastRun","isFirst","isLast","filteredRuns","slicedRuns","findCharIndex","search","findLastCharIndex","match","lastIndexOf","trim","empty$1","isNumber","appendIndices","indices","lastIndex","newIndices","Array","fill","concat","glyphForCodePoint","appendGlyph","_glyph$codePoints","glyphLength","append$1","stringFromCodePoints","append","codePointsString","firstRuns","lastRun","ELLIPSIS_UNICODE","ELLIPSIS_STRING","fromCharCode","getEllipsisCodePoint","encode","parseInt","truncate","_last","_last2","_last2$attributes","codePoint","lastBlock","omit","ascent$1","_run$attributes$attac","_run$attributes2","_run$attributes2$font","attachmentHeight","attachment","fontAscent","ascent","descent","_run$attributes$font","fontDescent","lineGap","height$1","lineHeight","reducer","intersects","x","num1","width","num2","getLineFragment","lineRect","excludeRect","eStart","eEnd","lStart","lEnd","r","getLineFragments","excludeRects","pieces","generateLineRects","container","lineRects","maxY","currentRect","rest","lineRectFragments","ATTACHMENT_CODE$1","purgeAttachments","shouldPurge","includes","layoutLines","rects","lines","indent","shift","currentY","line","_line$runs","_line$runs$","lineIndent","style","newLine","layoutParagraph","_paragraph$runs","_paragraph$runs$","_paragraph$runs$$attr","availableWidths","linebreaker","sliceAtHeight","newBlock","counter","typesetter","attributedStrings","blocks","paragraphs","layoutBlock","maxLines","truncateEllipsis","truncateMode","linesCount","paragraphRect","nextParagraph","slicedBlock","linesHeight","shouldTruncate","length$1","bidi$2","getBidiLevels$1","levels","bidiLevel","getReorderedIndices","segments","_ref","getItemAtIndex","objectName","updatedIndex","Error","reorderLine","_attributedString$run","direction","level","embeddingLevels","getReorderSegments","updatedString","getReorderedString","updatedRuns","selectedIndices","updatedGlyphs","updatedPositions","addedGlyphs","Set","has","id","isLigature","add","reorderParagraph","bidiReordering","DUMMY_CODEPOINT","resolve","next","getCharacterSpacing","characterSpacing","scalePositions","position","xSpacing","yAdvance","xOffset","yOffset","layoutRun","runString","glyphRun","generateGlyphs","resolveRunYOffset","p","resolveYOffset","sort","isEmpty","sortPoints","generatePoints","mergeRuns","groupEmptyRuns","groups","values","flattenEmptyRuns","flattenRegularRuns","res","points","attrs","stack","type","splice","flatten","emptyRuns","regularRuns","empty","omitFont","preprocessRuns","fontSubstitution","scriptItemizer","bidi","omittedFontRuns","itemizationRuns","substitutedRuns","bidiRuns","splitParagraphs","breakPoint","indexOf","advanceWidth$2","pos","advanceWidth$1","WHITE_SPACES_CODE","isWhiteSpace","leadingPositions","leadingWhitespaces","leadingOffset$1","leadingOffset","reverse","trailingPositions","trailingOffset$1","trailingOffset","dropLast$1","ALIGNMENT_FACTORS","center","right","removeNewLine","getOverflowLeft","overflowLeft","getOverflowRight","overflowRight","adjustOverflow","justifyLine$1","align","lineWidth","alignFactor","remainingWidth","shouldJustify","justification","finalizeLine","lineAscent","lineDescent","lineXAdvance","descent$1","finalizeBlock","isLastFragment","alignLastLine","textDecoration","finalizeFragments","blockFinalizer","ATTACHMENT_CODE","isReplaceGlyph","resolveRunAttachments","resolveAttachments","applyAttributes","backgroundColor","bullet","color","features","hangingPunctuation","hyphenationFactor","justificationFactor","lineSpacing","link","marginLeft","margin","marginRight","opacity","paddingTop","padding","paragraphSpacing","script","shrinkFactor","strike","strikeColor","strikeStyle","stroke","underline","underlineColor","underlineStyle","verticalAlign","wordSpacing","applyRunStyles","applyDefaultStyles","verticalAlignment","bidi$1","getBidiLevels","mirrorString","char","isRTL","mirroredChar","getMirroredCharacter","charAt","layoutEngine","processParagraph","processParagraphs","bidiEngine","getEmbeddingLevels","lastLevel","INFINITY","getNextBreakpoint","subnodes","widths","lineNumber","minimumBadness","sum","stretch","shrink","lineLength","calculateRatio","node","ratio","penalty","badness","abs","applyBestFit","nodes","count","breakpoints","breakpoint","Node","constructor","data","prev","toString","LinkedList","tail","listSize","listLength","isLinked","size","first","toArray","fun","contains","at","insertAfter","newNode","insertBefore","unshift","remove","pop","linebreak","settings","demerits","flagged","fitness","tolerance","activeNodes","lineLengths","breaks","tmp","fitnessClass","totals","previous","computeCost","active","currentLine","infinity","computeSum","breakPointIndex","mainLoop","candidates","tmpSum","currentClass","candidate","pow","glue","hyphenated","runA","runB","runAIndices","runALastIndex","runBIndices","insertGlyph$1","leadingRun","trailingRun","insert","runIndexAt","insertGlyph","runIndex","advanceWidthBetween$1","runStart","glyphStartIndex","glyphEndIndex","advanceWidthBetween","HYPHEN","TOLERANCE_STEPS","TOLERANCE_LIMIT","opts","breakLines","prevNode","getNodes","hyphenWidth","hyphenPenalty","hyphenationPenalty","s","getStyles","_attributedString$run2","WHITESPACE_PRIORITY","LETTER_PRIORITY","EXPAND_WHITESPACE_FACTOR","before","after","priority","unconstrained","EXPAND_CHAR_FACTOR","SHRINK_WHITESPACE_FACTOR","SHRINK_CHAR_FACTOR","getCharFactor","expandCharFactor","shrinkCharFactor","getWhitespaceFactor","expandWhitespaceFactor","shrinkWhitespaceFactor","factor","charFactor","whitespaceFactor","factors","f","isMark","getFactors","gap","getFactor","KASHIDA_PRIORITY","NULL_PRIORITY","getDistances","total","priorities","highestPriority","highestPrioritySum","remainingGap","prioritySum","distances","dist","justifyLine","BASE_FONT_SIZE","lineFragment","maxX","decorationLines","thickness","floor","ignoredScripts","lastScript","codePointAt","getScript","SOFT_HYPHEN","hyphenator","splitHyphen","cache","getParts","base","cacheKey","getFontSize","lastFont","defaultFont","default"],"sources":["C:/Users/broad/OneDrive/Documentos/FULLSTACK-TEST/pokedex/client/node_modules/@react-pdf/textkit/lib/textkit.js"],"sourcesContent":["import { isNil, last, repeat, dropLast as dropLast$2, adjust, compose } from '@react-pdf/fns';\nimport bidiFactory from 'bidi-js';\nimport unicode from 'unicode-properties';\nimport hyphen from 'hyphen';\nimport pattern from 'hyphen/patterns/en-us.js';\n\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n * @typedef {import('../types.js').Fragment} Fragment\n */\n\n/**\n * Create attributed string from text fragments\n *\n * @param {Fragment[]} fragments fragments\n * @returns {AttributedString} attributed string\n */\nconst fromFragments = fragments => {\n  let offset = 0;\n  let string = '';\n  const runs = [];\n  fragments.forEach(fragment => {\n    string += fragment.string;\n    runs.push({\n      ...fragment,\n      start: offset,\n      end: offset + fragment.string.length,\n      attributes: fragment.attributes || {}\n    });\n    offset += fragment.string.length;\n  });\n  return {\n    string,\n    runs\n  };\n};\n\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n */\n\n/**\n * Default word hyphenation engine used when no one provided.\n * Does not perform word hyphenation at all\n *\n * @param {string} word\n * @returns {[string]} same word\n */\nconst defaultHyphenationEngine = word => [word];\n\n/**\n * Wrap words of attribute string\n *\n * @param {Object} engines layout engines\n * @param {Object} options layout options\n */\nconst wrapWords = function (engines, options) {\n  if (engines === void 0) {\n    engines = {};\n  }\n  if (options === void 0) {\n    options = {};\n  }\n  /**\n   * @param {AttributedString} attributedString attributed string\n   * @returns {AttributedString} attributed string including syllables\n   */\n  return attributedString => {\n    var _engines$wordHyphenat, _engines;\n    const syllables = [];\n    const fragments = [];\n    const hyphenateWord = options.hyphenationCallback || ((_engines$wordHyphenat = (_engines = engines).wordHyphenation) === null || _engines$wordHyphenat === void 0 ? void 0 : _engines$wordHyphenat.call(_engines, options)) || defaultHyphenationEngine;\n    for (let i = 0; i < attributedString.runs.length; i += 1) {\n      let string = '';\n      const run = attributedString.runs[i];\n      const words = attributedString.string.slice(run.start, run.end).split(/([ ]+)/g).filter(Boolean);\n      for (let j = 0; j < words.length; j += 1) {\n        const word = words[j];\n        const parts = hyphenateWord(word);\n        syllables.push(...parts);\n        string += parts.join('');\n      }\n      fragments.push({\n        ...run,\n        string\n      });\n    }\n    return {\n      ...fromFragments(fragments),\n      syllables\n    };\n  };\n};\n\n/**\n * @typedef {import('../types.js').Rect} Rect\n */\n\n/**\n * Clone rect\n *\n * @param {Rect} rect rect\n * @returns {Rect} cloned rect\n */\nconst copy = rect => {\n  return Object.assign({}, rect);\n};\n\n/**\n * @typedef {import('../types.js').Rect} Rect\n */\n\n/**\n *\n * @param {Rect} rect rect\n * @param {number} height height\n * @returns {[Rect, Rect]} partitioned rects\n */\nconst partition = (rect, height) => {\n  const a = Object.assign({}, rect, {\n    height\n  });\n  const b = Object.assign({}, rect, {\n    y: rect.y + height,\n    height: rect.height - height\n  });\n  return [a, b];\n};\n\n/**\n * @typedef {import('../types.js').Rect} Rect\n */\n\n/**\n * Crop upper section of rect\n *\n * @param {number} height height\n * @param {Rect} rect rect\n * @returns {Rect} cropped rect\n */\nconst crop = (height, rect) => {\n  const [, result] = partition(rect, height);\n  return result;\n};\n\n/**\n * Get paragraph block height\n *\n * @param {Object}  paragraph block\n * @returns {number} paragraph block height\n */\nconst height$2 = paragraph => {\n  return paragraph.reduce((acc, block) => acc + block.box.height, 0);\n};\n\n/**\n * @typedef {import('../types.js').Run} Run\n */\n\n/**\n * Calculate run scale\n *\n * @param {Run} run run\n * @returns {number} scale\n */\nconst calculateScale = run => {\n  var _attributes$font;\n  const attributes = run.attributes || {};\n  const fontSize = attributes.fontSize || 12;\n  const unitsPerEm = (_attributes$font = attributes.font) === null || _attributes$font === void 0 ? void 0 : _attributes$font.unitsPerEm;\n  return unitsPerEm ? fontSize / unitsPerEm : 0;\n};\n\n/**\n * Get run scale\n *\n * @param {Object}  run\n * @returns {number} scale\n */\nconst scale = run => {\n  var _run$attributes;\n  return ((_run$attributes = run.attributes) === null || _run$attributes === void 0 ? void 0 : _run$attributes.scale) || calculateScale(run);\n};\n\n/**\n * @typedef {import('../types.js').Run} Run\n */\n\n/**\n * Get ligature offset by index\n *\n * Ex. ffi ligature\n *\n *   glyphs:         l  o  f  f  i  m\n *   glyphIndices:   0  1  2  2  2  3\n *   offset:         0  0  0  1  2  0\n *\n * @param {number} index\n * @param {Run} run run\n * @returns {number} ligature offset\n */\nconst offset = (index, run) => {\n  if (!run) return 0;\n  const glyphIndices = run.glyphIndices || [];\n  const value = glyphIndices[index];\n  return glyphIndices.slice(0, index).filter(i => i === value).length;\n};\n\n/**\n * @typedef {import('../types.js').Font} Font\n * @typedef {import('../types.js').Run} Run\n */\n\n/**\n * Get run font\n *\n * @param {Run} run run\n * @returns {Font | null} font\n */\nconst getFont = run => {\n  var _run$attributes;\n  return ((_run$attributes = run.attributes) === null || _run$attributes === void 0 ? void 0 : _run$attributes.font) || null;\n};\n\n/**\n * @typedef {import('../types.js').Font} Font\n * @typedef {import('../types.js').Glyph} Glyph\n */\n\n/**\n * Slice glyph between codePoints range\n * Util for breaking ligatures\n *\n * @param {number} start start code point index\n * @param {number} end end code point index\n * @param {Font} font font to generate new glyph\n * @param {Glyph} glyph glyph to be sliced\n * @returns {Glyph[]} sliced glyph parts\n */\nconst slice$2 = (start, end, font, glyph) => {\n  if (!glyph) return [];\n  if (start === end) return [];\n  if (start === 0 && end === glyph.codePoints.length) return [glyph];\n  const codePoints = glyph.codePoints.slice(start, end);\n  const string = String.fromCodePoint(...codePoints);\n\n  // passing LTR To force fontkit to not reverse the string\n  return font ? font.layout(string, undefined, undefined, undefined, 'ltr').glyphs : [glyph];\n};\n\n/**\n * @typedef {import('../types.js').Run} Run\n */\n\n/**\n * Return glyph index at string index, if glyph indices present.\n * Otherwise return string index\n *\n * @param {number} index index\n * @param {Run} run run\n * @returns {number} glyph index\n */\nconst glyphIndexAt = (index, run) => {\n  var _run$glyphIndices;\n  const result = run === null || run === void 0 ? void 0 : (_run$glyphIndices = run.glyphIndices) === null || _run$glyphIndices === void 0 ? void 0 : _run$glyphIndices[index];\n  return isNil(result) ? index : result;\n};\n\n/**\n * Returns new array starting with zero, and keeping same relation between consecutive values\n *\n * @param {number[]} array list\n * @returns {number[]} normalized array\n */\nconst normalize = array => {\n  const head = array[0];\n  return array.map(value => value - head);\n};\n\n/**\n * @typedef {import('../types.js').Run} Run\n */\n\n/**\n * Slice run between glyph indices range\n *\n * @param {number} start glyph index\n * @param {number} end glyph index\n * @param {Run} run run\n * @returns {Run} sliced run\n */\nconst slice$1 = (start, end, run) => {\n  var _run$glyphs, _run$glyphs2;\n  const runScale = scale(run);\n  const font = getFont(run);\n\n  // Get glyph start and end indices\n  const startIndex = glyphIndexAt(start, run);\n  const endIndex = glyphIndexAt(end, run);\n\n  // Get start and end glyph\n  const startGlyph = (_run$glyphs = run.glyphs) === null || _run$glyphs === void 0 ? void 0 : _run$glyphs[startIndex];\n  const endGlyph = (_run$glyphs2 = run.glyphs) === null || _run$glyphs2 === void 0 ? void 0 : _run$glyphs2[endIndex];\n\n  // Get start ligature chunks (if any)\n  const startOffset = offset(start, run);\n  const startGlyphs = startOffset > 0 ? slice$2(startOffset, Infinity, font, startGlyph) : [];\n\n  // Get end ligature chunks (if any)\n  const endOffset = offset(end, run);\n  const endGlyphs = slice$2(0, endOffset, font, endGlyph);\n\n  // Compute new glyphs\n  const sliceStart = startIndex + Math.min(1, startOffset);\n  const glyphs = (run.glyphs || []).slice(sliceStart, endIndex);\n\n  // Compute new positions\n  const glyphPosition = g => ({\n    xAdvance: g.advanceWidth * runScale\n  });\n  const startPositions = startGlyphs.map(glyphPosition);\n  const positions = (run.positions || []).slice(sliceStart, endIndex);\n  const endPositions = endGlyphs.map(glyphPosition);\n  return Object.assign({}, run, {\n    start: run.start + start,\n    end: Math.min(run.end, run.start + end),\n    glyphIndices: normalize((run.glyphIndices || []).slice(start, end)),\n    glyphs: [startGlyphs, glyphs, endGlyphs].flat(),\n    positions: [startPositions, positions, endPositions].flat()\n  });\n};\n\n/**\n * @typedef {import('../types.js').Run} Run\n */\n\n/**\n * Get run index that contains passed index\n *\n * @param {number} n index\n * @param {Run[]} runs runs\n * @returns {number} run index\n */\nconst runIndexAt$1 = (n, runs) => {\n  if (!runs) return -1;\n  return runs.findIndex(run => run.start <= n && n < run.end);\n};\n\n/**\n * @typedef {import('../types.js').Run} Run\n */\n\n/**\n * Filter runs contained between start and end\n *\n * @param {number} start\n * @param {number} end\n * @param {Run[]} runs\n * @returns {Run[]} filtered runs\n */\nconst filter = (start, end, runs) => {\n  const startIndex = runIndexAt$1(start, runs);\n  const endIndex = Math.max(runIndexAt$1(end - 1, runs), startIndex);\n  return runs.slice(startIndex, endIndex + 1);\n};\n\n/**\n * @typedef {import('../types.js').Run} Run\n */\n\n/**\n * Subtract scalar to run\n *\n * @param {number} n scalar\n * @param {Run} run run\n * @returns {Object} subtracted run\n */\nconst subtract = (n, run) => {\n  const start = run.start - n;\n  const end = run.end - n;\n  return Object.assign({}, run, {\n    start,\n    end\n  });\n};\n\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n * @typedef {import('../types.js').Run} Run\n */\n\n/**\n * Slice array of runs\n *\n * @param {number} start offset\n * @param {number} end offset\n * @param {Run[]} runs\n * @returns {Run[]} sliced runs\n */\nconst sliceRuns = (start, end, runs) => {\n  const sliceFirstRun = a => slice$1(start - a.start, end - a.start, a);\n  const sliceLastRun = a => slice$1(0, end - a.start, a);\n  return runs.map((run, i) => {\n    let result = run;\n    const isFirst = i === 0;\n    const isLast = !isFirst && i === runs.length - 1;\n    if (isFirst) result = sliceFirstRun(run);\n    if (isLast) result = sliceLastRun(run);\n    return subtract(start, result);\n  });\n};\n\n/**\n * Slice attributed string between two indices\n *\n * @param {number} start offset\n * @param {number} end offset\n * @param {AttributedString} attributedString attributed string\n * @returns {AttributedString} attributed string\n */\nconst slice = (start, end, attributedString) => {\n  if (attributedString.string.length === 0) return attributedString;\n  const string = attributedString.string.slice(start, end);\n  const filteredRuns = filter(start, end, attributedString.runs);\n  const slicedRuns = sliceRuns(start, end, filteredRuns);\n  return Object.assign({}, attributedString, {\n    string,\n    runs: slicedRuns\n  });\n};\n\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n */\n\n/**\n * @param {string} string\n * @returns {number} index\n */\nconst findCharIndex = string => {\n  return string.search(/\\S/g);\n};\n\n/**\n * @param {string} string\n * @returns {number} index\n */\nconst findLastCharIndex = string => {\n  const match = string.match(/\\S/g);\n  return match ? string.lastIndexOf(match[match.length - 1]) : -1;\n};\n\n/**\n * Removes (strips) whitespace from both ends of the attributted string.\n *\n * @param {AttributedString} attributedString attributed string\n * @returns {AttributedString} attributed string\n */\nconst trim = attributedString => {\n  const start = findCharIndex(attributedString.string);\n  const end = findLastCharIndex(attributedString.string);\n  return slice(start, end + 1, attributedString);\n};\n\n/**\n * @typedef {import('../types.js').Run} Run\n */\n\n/**\n * Returns empty run\n *\n * @returns {Run} empty run\n */\nconst empty$1 = () => {\n  return {\n    start: 0,\n    end: 0,\n    glyphIndices: [],\n    glyphs: [],\n    positions: [],\n    attributes: {}\n  };\n};\n\n/**\n * Check if value is a number\n *\n * @template {unknown} T\n * @param {T} value Value to check\n * @returns {value is number} Whether value is a number\n */\nconst isNumber = value => {\n  return typeof value === 'number';\n};\n\n/**\n * Append glyph indices with given length\n *\n * Ex. appendIndices(3, [0, 1, 2, 2]) => [0, 1, 2, 2, 3, 3, 3]\n *\n * @param {number} length length\n * @param {number[]} indices glyph indices\n * @returns {number[]} extended glyph indices\n */\nconst appendIndices = (length, indices) => {\n  const lastIndex = last(indices);\n  const value = isNil(lastIndex) ? 0 : lastIndex + 1;\n  const newIndices = Array(length).fill(value);\n  return indices.concat(newIndices);\n};\n\n/**\n * @typedef {import('../types.js').Font} Font\n * @typedef {import('../types.js').Glyph} Glyph\n */\n\n/**\n * Get glyph for a given code point\n *\n * @param {number} [value] codePoint\n * @param {Font} [font] font\n * @returns {Glyph} glyph\n * */\nconst fromCodePoint = (value, font) => {\n  return font && value ? font.glyphForCodePoint(value) : null;\n};\n\n/**\n * @typedef {import('../types.js').Glyph} Glyph\n * @typedef {import('../types.js').Run} Run\n */\n\n/**\n * Append glyph to run\n *\n * @param {Glyph} glyph glyph\n * @param {Run} run run\n * @returns {Run} run with glyph\n */\nconst appendGlyph = (glyph, run) => {\n  var _glyph$codePoints;\n  const glyphLength = ((_glyph$codePoints = glyph.codePoints) === null || _glyph$codePoints === void 0 ? void 0 : _glyph$codePoints.length) || 0;\n  const end = run.end + glyphLength;\n  const glyphs = run.glyphs.concat(glyph);\n  const glyphIndices = appendIndices(glyphLength, run.glyphIndices);\n  if (!run.positions) return Object.assign({}, run, {\n    end,\n    glyphs,\n    glyphIndices\n  });\n  const positions = run.positions.concat({\n    xAdvance: glyph.advanceWidth * scale(run)\n  });\n  return Object.assign({}, run, {\n    end,\n    glyphs,\n    glyphIndices,\n    positions\n  });\n};\n\n/**\n * Append glyph or code point to run\n *\n * @param {Glyph | number | undefined} value glyph or codePoint\n * @param {Run} run run\n * @returns {Run} run with glyph\n */\nconst append$1 = (value, run) => {\n  if (!value) return run;\n  const font = getFont(run);\n  const glyph = isNumber(value) ? fromCodePoint(value, font) : value;\n  return appendGlyph(glyph, run);\n};\n\n/**\n * Get string from array of code points\n *\n * @param {number[]} codePoints points\n * @returns {string} string\n */\nconst stringFromCodePoints = codePoints => {\n  return String.fromCodePoint(...(codePoints || []));\n};\n\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n * @typedef {import('../types.js').Glyph} Glyph\n */\n\n/**\n * Append glyph into last run of attributed string\n *\n * @param {Glyph} glyph glyph\n * @param {AttributedString} attributedString attributed string\n * @returns {AttributedString} attributed string with new glyph\n */\nconst append = (glyph, attributedString) => {\n  const codePoints = (glyph === null || glyph === void 0 ? void 0 : glyph.codePoints) || [];\n  const codePointsString = stringFromCodePoints(codePoints);\n  const string = attributedString.string + codePointsString;\n  const firstRuns = attributedString.runs.slice(0, -1);\n  const lastRun = last(attributedString.runs) || empty$1();\n  const runs = firstRuns.concat(append$1(glyph, lastRun));\n  return Object.assign({}, attributedString, {\n    string,\n    runs\n  });\n};\n\nconst ELLIPSIS_UNICODE = 8230;\nconst ELLIPSIS_STRING = String.fromCharCode(ELLIPSIS_UNICODE);\n\n/**\n * Get ellipsis codepoint. This may be different in standard and embedded fonts\n *\n * @param {Object} font\n * @returns {Object} ellipsis codepoint\n */\nconst getEllipsisCodePoint = font => {\n  if (!font.encode) return ELLIPSIS_UNICODE;\n  const [codePoints] = font.encode(ELLIPSIS_STRING);\n  return parseInt(codePoints[0], 16);\n};\n\n/**\n * Trucante block with ellipsis\n *\n * @param {Object} block paragraph block\n * @returns {Object} sliced paragraph block\n */\nconst truncate = block => {\n  var _last, _last2, _last2$attributes;\n  const runs = ((_last = last(block)) === null || _last === void 0 ? void 0 : _last.runs) || [];\n  const font = (_last2 = last(runs)) === null || _last2 === void 0 ? void 0 : (_last2$attributes = _last2.attributes) === null || _last2$attributes === void 0 ? void 0 : _last2$attributes.font;\n  if (font) {\n    const index = block.length - 1;\n    const codePoint = getEllipsisCodePoint(font);\n    const glyph = font.glyphForCodePoint(codePoint);\n    const lastBlock = append(glyph, trim(block[index]));\n    return Object.assign([], block, {\n      [index]: lastBlock\n    });\n  }\n  return block;\n};\n\n/**\n * @typedef {import('../types.js').Attributes} Attributes\n * @typedef {import('../types.js').Run} Run\n */\n\n/**\n * Omit attribute from run\n *\n * @param {keyof Attributes} value attribute value\n * @param {Run} run run\n * @returns {Run} run without ommited attribute\n */\nconst omit = (value, run) => {\n  const attributes = Object.assign({}, run.attributes);\n  delete attributes[value];\n  return Object.assign({}, run, {\n    attributes\n  });\n};\n\n/**\n * @typedef {import('../types.js').Run} Run\n */\n\n/**\n * Get run ascent\n *\n * @param {Run} run run\n * @returns {number} ascent\n */\nconst ascent$1 = run => {\n  var _run$attributes, _run$attributes$attac, _run$attributes2, _run$attributes2$font;\n  const attachmentHeight = ((_run$attributes = run.attributes) === null || _run$attributes === void 0 ? void 0 : (_run$attributes$attac = _run$attributes.attachment) === null || _run$attributes$attac === void 0 ? void 0 : _run$attributes$attac.height) || 0;\n  const fontAscent = ((_run$attributes2 = run.attributes) === null || _run$attributes2 === void 0 ? void 0 : (_run$attributes2$font = _run$attributes2.font) === null || _run$attributes2$font === void 0 ? void 0 : _run$attributes2$font.ascent) || 0;\n  return Math.max(attachmentHeight, fontAscent * scale(run));\n};\n\n/**\n * @typedef {import('../types.js').Run} Run\n */\n\n/**\n * Get run descent\n *\n * @param {Run} run run\n * @returns {number} descent\n */\nconst descent = run => {\n  var _run$attributes, _run$attributes$font;\n  const fontDescent = ((_run$attributes = run.attributes) === null || _run$attributes === void 0 ? void 0 : (_run$attributes$font = _run$attributes.font) === null || _run$attributes$font === void 0 ? void 0 : _run$attributes$font.descent) || 0;\n  return scale(run) * fontDescent;\n};\n\n/**\n * @typedef {import('../types.js').Run} Run\n */\n\n/**\n * Get run lineGap\n *\n * @param {Object} run run\n * @returns {number} lineGap\n */\nconst lineGap = run => {\n  var _run$attributes, _run$attributes$font;\n  return (((_run$attributes = run.attributes) === null || _run$attributes === void 0 ? void 0 : (_run$attributes$font = _run$attributes.font) === null || _run$attributes$font === void 0 ? void 0 : _run$attributes$font.lineGap) || 0) * scale(run);\n};\n\n/**\n * @typedef {import('../types.js').Run} Run\n */\n\n/**\n * Get run height\n *\n * @param {Run} run run\n * @returns {number} height\n */\nconst height$1 = run => {\n  var _run$attributes;\n  const lineHeight = (_run$attributes = run.attributes) === null || _run$attributes === void 0 ? void 0 : _run$attributes.lineHeight;\n  return lineHeight || lineGap(run) + ascent$1(run) - descent(run);\n};\n\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n */\n\n/**\n * Returns attributed string height\n *\n * @param {AttributedString} attributedString attributed string\n * @returns {number} height\n */\nconst height = attributedString => {\n  const reducer = (acc, run) => Math.max(acc, height$1(run));\n  return attributedString.runs.reduce(reducer, 0);\n};\n\n/**\n * @typedef {import('../types.js').Rect} Rect\n */\n\n/**\n * Checks if two rects intersect each other\n *\n * @param {Rect} a rect A\n * @param {Rect} b rect B\n * @returns {boolean} whether rects intersect\n */\nconst intersects = (a, b) => {\n  const x = Math.max(a.x, b.x);\n  const num1 = Math.min(a.x + a.width, b.x + b.width);\n  const y = Math.max(a.y, b.y);\n  const num2 = Math.min(a.y + a.height, b.y + b.height);\n  return num1 >= x && num2 >= y;\n};\n\nconst getLineFragment = (lineRect, excludeRect) => {\n  if (!intersects(excludeRect, lineRect)) return [lineRect];\n  const eStart = excludeRect.x;\n  const eEnd = excludeRect.x + excludeRect.width;\n  const lStart = lineRect.x;\n  const lEnd = lineRect.x + lineRect.width;\n  const a = Object.assign({}, lineRect, {\n    width: eStart - lStart\n  });\n  const b = Object.assign({}, lineRect, {\n    x: eEnd,\n    width: lEnd - eEnd\n  });\n  return [a, b].filter(r => r.width > 0);\n};\nconst getLineFragments = (rect, excludeRects) => {\n  let fragments = [rect];\n  for (let i = 0; i < excludeRects.length; i += 1) {\n    const excludeRect = excludeRects[i];\n    fragments = fragments.reduce((acc, fragment) => {\n      const pieces = getLineFragment(fragment, excludeRect);\n      return acc.concat(pieces);\n    }, []);\n  }\n  return fragments;\n};\nconst generateLineRects = (container, height) => {\n  const {\n    excludeRects,\n    ...rect\n  } = container;\n  if (!excludeRects) return [rect];\n  const lineRects = [];\n  const maxY = Math.max(...excludeRects.map(r => r.y + r.height));\n  let currentRect = rect;\n  while (currentRect.y < maxY) {\n    const [lineRect, rest] = partition(currentRect, height);\n    const lineRectFragments = getLineFragments(lineRect, excludeRects);\n    currentRect = rest;\n    lineRects.push(...lineRectFragments);\n  }\n  return [...lineRects, currentRect];\n};\n\nconst ATTACHMENT_CODE$1 = '\\ufffc'; // 65532\n\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n * @typedef {import('../types.js').Rect} Rect\n */\n\n/**\n * Remove attachment attribute if no char present\n *\n * @param {AttributedString} attributedString attributed string\n * @returns {AttributedString} attributed string\n */\nconst purgeAttachments = attributedString => {\n  const shouldPurge = !attributedString.string.includes(ATTACHMENT_CODE$1);\n  if (!shouldPurge) return attributedString;\n  const runs = attributedString.runs.map(run => omit('attachment', run));\n  return Object.assign({}, attributedString, {\n    runs\n  });\n};\n\n/**\n * Layout paragraphs inside rectangle\n *\n * @param {Object} rects rect\n * @param {Object[]} lines attributed strings\n * @param {number} indent\n * @returns {Object} layout blocks\n */\nconst layoutLines = (rects, lines, indent) => {\n  let rect = rects.shift();\n  let currentY = rect.y;\n  return lines.map((line, i) => {\n    var _line$runs, _line$runs$;\n    const lineIndent = i === 0 ? indent : 0;\n    const style = ((_line$runs = line.runs) === null || _line$runs === void 0 ? void 0 : (_line$runs$ = _line$runs[0]) === null || _line$runs$ === void 0 ? void 0 : _line$runs$.attributes) || {};\n    const height$1 = Math.max(height(line), style.lineHeight);\n    if (currentY + height$1 > rect.y + rect.height && rects.length > 0) {\n      rect = rects.shift();\n      currentY = rect.y;\n    }\n    const newLine = Object.assign({}, line);\n    delete newLine.syllables;\n    newLine.box = {\n      x: rect.x + lineIndent,\n      y: currentY,\n      width: rect.width - lineIndent,\n      height: height$1\n    };\n    currentY += height$1;\n    return purgeAttachments(newLine);\n  });\n};\n\n/**\n * Performs line breaking and layout\n *\n * @param {Object} engines engines\n * @param {Object} options layout options\n */\nconst layoutParagraph = (engines, options) => {\n  /**\n   * @param {Rect} container rect\n   * @param {Object} paragraph attributed string\n   * @returns {Object} layout block\n   */\n  return (container, paragraph) => {\n    var _paragraph$runs, _paragraph$runs$, _paragraph$runs$$attr;\n    const height$1 = height(paragraph);\n    const indent = ((_paragraph$runs = paragraph.runs) === null || _paragraph$runs === void 0 ? void 0 : (_paragraph$runs$ = _paragraph$runs[0]) === null || _paragraph$runs$ === void 0 ? void 0 : (_paragraph$runs$$attr = _paragraph$runs$.attributes) === null || _paragraph$runs$$attr === void 0 ? void 0 : _paragraph$runs$$attr.indent) || 0;\n    const rects = generateLineRects(container, height$1);\n    const availableWidths = rects.map(r => r.width);\n    availableWidths[0] -= indent;\n    const lines = engines.linebreaker(options)(paragraph, availableWidths);\n    return layoutLines(rects, lines, indent);\n  };\n};\n\n/**\n * Slice block at given height\n *\n * @param {number} height height\n * @param {Object} block paragraph block\n * @returns {number[]} sliced paragraph block\n */\nconst sliceAtHeight = (height, block) => {\n  const newBlock = [];\n  let counter = 0;\n  for (let i = 0; i < block.length; i += 1) {\n    const line = block[i];\n    counter += line.box.height;\n    if (counter < height) {\n      newBlock.push(line);\n    } else {\n      break;\n    }\n  }\n  return newBlock;\n};\n\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n * @typedef {import('../types.js').Rect} Rect\n */\n\n/**\n * Layout paragraphs inside container until it does not\n * fit anymore, performing line wrapping in the process.\n *\n * @param {Object} engines engines\n * @param {Object} options layout options\n * @param {Rect} container container rect\n */\nconst typesetter = (engines, options, container) => {\n  /**\n   * @param {AttributedString} attributedStrings attributed strings (paragraphs)\n   * @returns {Object[]} paragraph blocks\n   */\n  return attributedStrings => {\n    const blocks = [];\n    const paragraphs = [...attributedStrings];\n    const layoutBlock = layoutParagraph(engines, options);\n    const maxLines = isNil(container.maxLines) ? Infinity : container.maxLines;\n    const truncateEllipsis = container.truncateMode === 'ellipsis';\n    let linesCount = maxLines;\n    let paragraphRect = copy(container);\n    let nextParagraph = paragraphs.shift();\n    while (linesCount > 0 && nextParagraph) {\n      const block = layoutBlock(paragraphRect, nextParagraph);\n      const slicedBlock = block.slice(0, linesCount);\n      const linesHeight = height$2(slicedBlock);\n      const shouldTruncate = truncateEllipsis && block.length !== slicedBlock.length;\n      linesCount -= slicedBlock.length;\n      if (paragraphRect.height >= linesHeight) {\n        blocks.push(shouldTruncate ? truncate(slicedBlock) : slicedBlock);\n        paragraphRect = crop(linesHeight, paragraphRect);\n        nextParagraph = paragraphs.shift();\n      } else {\n        blocks.push(truncate(sliceAtHeight(paragraphRect.height, slicedBlock)));\n        break;\n      }\n    }\n    return blocks;\n  };\n};\n\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n */\n\n/**\n * Get attributed string start value\n *\n * @param {AttributedString} attributedString attributed string\n * @returns {number} start\n */\nconst start = attributedString => {\n  const {\n    runs\n  } = attributedString;\n  return runs.length === 0 ? 0 : runs[0].start;\n};\n\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n */\n\n/**\n * Get attributed string end value\n *\n * @param {AttributedString} attributedString attributed string\n * @returns {number} end\n */\nconst end = attributedString => {\n  const {\n    runs\n  } = attributedString;\n  return runs.length === 0 ? 0 : last(runs).end;\n};\n\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n */\n\n/**\n * Get attributed string length\n *\n * @param {AttributedString} attributedString attributed string\n * @returns {number} end\n */\nconst length$1 = attributedString => {\n  return end(attributedString) - start(attributedString);\n};\n\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n * @typedef {import('../types.js').Glyph} Glyph\n * @typedef {import('../types.js').Position} Position\n * @typedef {import('../types.js').Run} Run\n */\n\nconst bidi$2 = bidiFactory();\n\n/**\n * @param {Run[]} runs\n * @returns {number[]} bidi levels\n */\nconst getBidiLevels$1 = runs => {\n  return runs.reduce((acc, run) => {\n    const length = run.end - run.start;\n    const levels = repeat(run.attributes.bidiLevel, length);\n    return acc.concat(levels);\n  }, []);\n};\nconst getReorderedIndices = (string, segments) => {\n  // Fill an array with indices\n  const indices = [];\n  for (let i = 0; i < string.length; i += 1) {\n    indices[i] = i;\n  }\n  // Reverse each segment in order\n  segments.forEach(_ref => {\n    let [start, end] = _ref;\n    const slice = indices.slice(start, end + 1);\n    for (let i = slice.length - 1; i >= 0; i -= 1) {\n      indices[end - i] = slice[i];\n    }\n  });\n  return indices;\n};\n\n/**\n * @template {'glyphs'|'positions'} T\n * @param {Run[]} runs\n * @param {T} objectName\n * @param {number} index\n * @returns {T extends 'glyphs' ? Glyph|undefined : Position|undefined}\n */\nconst getItemAtIndex = (runs, objectName, index) => {\n  for (let i = 0; i < runs.length; i += 1) {\n    const run = runs[i];\n    const updatedIndex = run.glyphIndices[index - run.start];\n    if (index >= run.start && index < run.end) {\n      return run[objectName][updatedIndex];\n    }\n  }\n  throw new Error(`index ${index} out of range`);\n};\n\n/**\n * @param {AttributedString} attributedString attributed string\n * @returns {AttributedString} reordered attributed string\n */\nconst reorderLine = attributedString => {\n  var _attributedString$run;\n  const levels = getBidiLevels$1(attributedString.runs);\n  const direction = (_attributedString$run = attributedString.runs[0]) === null || _attributedString$run === void 0 ? void 0 : _attributedString$run.attributes.direction;\n  const level = direction === 'rtl' ? 1 : 0;\n  const end = length$1(attributedString) - 1;\n  const paragraphs = [{\n    start: 0,\n    end,\n    level\n  }];\n  const embeddingLevels = {\n    paragraphs,\n    levels\n  };\n  const segments = bidi$2.getReorderSegments(attributedString.string, embeddingLevels);\n\n  // No need for bidi reordering\n  if (segments.length === 0) return attributedString;\n  const indices = getReorderedIndices(attributedString.string, segments);\n  const updatedString = bidi$2.getReorderedString(attributedString.string, embeddingLevels);\n  const updatedRuns = attributedString.runs.map(run => {\n    const selectedIndices = indices.slice(run.start, run.end);\n    const updatedGlyphs = [];\n    const updatedPositions = [];\n    const addedGlyphs = new Set();\n    for (let i = 0; i < selectedIndices.length; i += 1) {\n      const index = selectedIndices[i];\n      const glyph = getItemAtIndex(attributedString.runs, 'glyphs', index);\n      if (addedGlyphs.has(glyph.id)) continue;\n      updatedGlyphs.push(glyph);\n      updatedPositions.push(getItemAtIndex(attributedString.runs, 'positions', index));\n      if (glyph.isLigature) {\n        addedGlyphs.add(glyph.id);\n      }\n    }\n    return {\n      ...run,\n      glyphs: updatedGlyphs,\n      positions: updatedPositions\n    };\n  });\n  return {\n    ...attributedString,\n    runs: updatedRuns,\n    string: updatedString\n  };\n};\n\n/**\n * Reorder a paragraph\n *\n * @param {AttributedString[]} lines\n * @returns {AttributedString[]} reordered lines\n */\nconst reorderParagraph = lines => lines.map(reorderLine);\n\n/**\n * Perform bidi reordering\n *\n * @returns {(paragraphs: AttributedString[][]) => AttributedString[][]} reordered paragraphs\n */\nconst bidiReordering = () => {\n  /**\n   * @param {AttributedString[][]} paragraphs line blocks\n   * @returns {AttributedString[][]} reordered line blocks\n   */\n  return paragraphs => paragraphs.map(reorderParagraph);\n};\n\n/**\n * @typedef {import('../types.js').Glyph} Glyph\n */\n\nconst DUMMY_CODEPOINT = 123;\n\n/**\n * Resolve string indices based on glyphs code points\n *\n * @param {Glyph[]} glyphs\n * @returns {number[]} glyph indices\n */\nconst resolve = function (glyphs) {\n  if (glyphs === void 0) {\n    glyphs = [];\n  }\n  return glyphs.reduce((acc, glyph) => {\n    const codePoints = (glyph === null || glyph === void 0 ? void 0 : glyph.codePoints) || [DUMMY_CODEPOINT];\n    if (acc.length === 0) return codePoints.map(() => 0);\n    const last = acc[acc.length - 1];\n    const next = codePoints.map(() => last + 1);\n    return [...acc, ...next];\n  }, []);\n};\n\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n * @typedef {import('../types.js').Position} Position\n * @typedef {import('../types.js').Run} Run\n */\n\n/**\n * @param {Run} run\n * @returns {number}\n */\nconst getCharacterSpacing = run => {\n  var _run$attributes;\n  return ((_run$attributes = run.attributes) === null || _run$attributes === void 0 ? void 0 : _run$attributes.characterSpacing) || 0;\n};\n\n/**\n * Scale run positions\n *\n * @param {Run} run\n * @param {Position[]} positions\n * @returns {Position[]} scaled positions\n */\nconst scalePositions = (run, positions) => {\n  const runScale = scale(run);\n  const characterSpacing = getCharacterSpacing(run);\n  return positions.map((position, i) => {\n    const isLast = i === positions.length;\n    const xSpacing = isLast ? 0 : characterSpacing;\n    return Object.assign({}, position, {\n      xAdvance: position.xAdvance * runScale + xSpacing,\n      yAdvance: position.yAdvance * runScale,\n      xOffset: position.xOffset * runScale,\n      yOffset: position.yOffset * runScale\n    });\n  });\n};\n\n/**\n * Create glyph run\n *\n * @param {string} string string\n */\nconst layoutRun = string => {\n  /**\n   * @param {Run} run run\n   * @returns {Run} glyph run\n   */\n  return run => {\n    const {\n      start,\n      end,\n      attributes = {}\n    } = run;\n    const {\n      font\n    } = attributes;\n    if (!font) return {\n      ...run,\n      glyphs: [],\n      glyphIndices: [],\n      positions: []\n    };\n    const runString = string.slice(start, end);\n\n    // passing LTR To force fontkit to not reverse the string\n    const glyphRun = font.layout(runString, undefined, undefined, undefined, 'ltr');\n    const positions = scalePositions(run, glyphRun.positions);\n    const glyphIndices = resolve(glyphRun.glyphs);\n    return {\n      ...run,\n      positions,\n      glyphIndices,\n      glyphs: glyphRun.glyphs\n    };\n  };\n};\n\n/**\n * Generate glyphs for single attributed string\n */\nconst generateGlyphs = () => {\n  /**\n   * @param {AttributedString} attributedString attributed string\n   * @returns {AttributedString} attributed string with glyphs\n   */\n  return attributedString => {\n    const runs = attributedString.runs.map(layoutRun(attributedString.string));\n    return Object.assign({}, attributedString, {\n      runs\n    });\n  };\n};\n\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n * @typedef {import('../types.js').Run} Run\n */\n\n/**\n * Resolves yOffset for run\n *\n * @param {Run} run run\n * @returns {Run} run\n */\nconst resolveRunYOffset = run => {\n  var _run$attributes, _run$attributes$font, _run$attributes2;\n  if (!run.positions) return run;\n  const unitsPerEm = ((_run$attributes = run.attributes) === null || _run$attributes === void 0 ? void 0 : (_run$attributes$font = _run$attributes.font) === null || _run$attributes$font === void 0 ? void 0 : _run$attributes$font.unitsPerEm) || 0;\n  const yOffset = (((_run$attributes2 = run.attributes) === null || _run$attributes2 === void 0 ? void 0 : _run$attributes2.yOffset) || 0) * unitsPerEm;\n  const positions = run.positions.map(p => Object.assign({}, p, {\n    yOffset\n  }));\n  return Object.assign({}, run, {\n    positions\n  });\n};\n\n/**\n * Resolves yOffset for multiple paragraphs\n */\nconst resolveYOffset = () => {\n  /**\n   * @param {AttributedString} attributedString attributed string\n   * @returns {AttributedString} attributed string\n   */\n  return attributedString => {\n    const runs = attributedString.runs.map(resolveRunYOffset);\n    return Object.assign({}, attributedString, {\n      runs\n    });\n  };\n};\n\n/**\n * @typedef {import('../types.js').Run} Run\n */\n\n/**\n * Sort runs in ascending order\n *\n * @param {Run[]} runs\n * @returns {Run[]} sorted runs\n */\nconst sort = runs => {\n  return runs.sort((a, b) => a.start - b.start || a.end - b.end);\n};\n\n/**\n * @typedef {import('../types.js').Run} Run\n */\n\n/**\n * Is run empty (start === end)\n *\n * @param {Run} run run\n * @returns {boolean} is run empty\n */\nconst isEmpty = run => {\n  return run.start === run.end;\n};\n\n/**\n * @typedef {import('../types.js').Point} Point\n * @typedef {import('../types.js').Run} Run\n */\n\n/**\n * Sort points in ascending order\n * @param {Point} a first point\n * @param {Point} b second point\n * @returns {number} sort order\n */\nconst sortPoints = (a, b) => {\n  return a[1] - b[1] || a[3] - b[3];\n};\n\n/**\n * @param {Run[]} runs\n * @returns {Point[]} points\n */\nconst generatePoints = runs => {\n  const result = runs.reduce((acc, run, i) => {\n    return acc.concat([['start', run.start, run.attributes, i], ['end', run.end, run.attributes, i]]);\n  }, []);\n  return result.sort(sortPoints);\n};\n\n/**\n * @param {Run[]} runs\n * @returns {Run} merged runs\n */\nconst mergeRuns = runs => {\n  return runs.reduce((acc, run) => {\n    const attributes = Object.assign({}, acc.attributes, run.attributes);\n    return Object.assign({}, run, {\n      attributes\n    });\n  }, {});\n};\n\n/**\n * @param {Run[]} runs\n * @returns {Run[][]} grouped runs\n */\nconst groupEmptyRuns = runs => {\n  const groups = runs.reduce((acc, run) => {\n    if (!acc[run.start]) acc[run.start] = [];\n    acc[run.start].push(run);\n    return acc;\n  }, []);\n  return Object.values(groups);\n};\n\n/**\n * @param {Run[]} runs\n * @returns {Run[]} flattened runs\n */\nconst flattenEmptyRuns = runs => {\n  return groupEmptyRuns(runs).map(mergeRuns);\n};\n\n/**\n * @param {Run[]} runs\n * @returns {Run[]} flattened runs\n */\nconst flattenRegularRuns = runs => {\n  const res = [];\n  const points = generatePoints(runs);\n  let start = -1;\n  let attrs = {};\n  const stack = [];\n  for (let i = 0; i < points.length; i += 1) {\n    const [type, offset, attributes] = points[i];\n    if (start !== -1 && start < offset) {\n      res.push({\n        start,\n        end: offset,\n        attributes: attrs\n      });\n    }\n    if (type === 'start') {\n      stack.push(attributes);\n      attrs = Object.assign({}, attrs, attributes);\n    } else {\n      attrs = {};\n      for (let j = 0; j < stack.length; j += 1) {\n        if (stack[j] === attributes) {\n          // eslint-disable-next-line no-plusplus\n          stack.splice(j--, 1);\n        } else {\n          attrs = Object.assign({}, attrs, stack[j]);\n        }\n      }\n    }\n    start = offset;\n  }\n  return res;\n};\n\n/**\n * Flatten many runs\n *\n * @param {Run[]} runs\n * @returns {Run[]} flattened runs\n */\nconst flatten = function (runs) {\n  if (runs === void 0) {\n    runs = [];\n  }\n  const emptyRuns = flattenEmptyRuns(runs.filter(run => isEmpty(run)));\n  const regularRuns = flattenRegularRuns(runs.filter(run => !isEmpty(run)));\n  return sort(emptyRuns.concat(regularRuns));\n};\n\n/**\n * Returns empty attributed string\n *\n * @returns {Object} empty attributed string\n */\nconst empty = () => ({\n  string: '',\n  runs: []\n});\n\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n */\n\n/**\n *\n * @param {AttributedString} attributedString\n * @returns {AttributedString} attributed string without font\n */\nconst omitFont = attributedString => {\n  const runs = attributedString.runs.map(run => omit('font', run));\n  return Object.assign({}, attributedString, {\n    runs\n  });\n};\n\n/**\n * Performs font substitution and script itemization on attributed string\n *\n * @param {Object} engines engines\n * @param {Object} options layout options\n */\nconst preprocessRuns = (engines, options) => {\n  /**\n   * @param {AttributedString} attributedString attributed string\n   * @returns {AttributedString} processed attributed string\n   */\n  return attributedString => {\n    if (isNil(attributedString)) return empty();\n    const {\n      string\n    } = attributedString;\n    const {\n      fontSubstitution,\n      scriptItemizer,\n      bidi\n    } = engines;\n    const {\n      runs: omittedFontRuns\n    } = omitFont(attributedString);\n    const {\n      runs: itemizationRuns\n    } = scriptItemizer(options)(attributedString);\n    const {\n      runs: substitutedRuns\n    } = fontSubstitution(options)(attributedString);\n    const {\n      runs: bidiRuns\n    } = bidi(options)(attributedString);\n    const runs = bidiRuns.concat(substitutedRuns).concat(itemizationRuns).concat(omittedFontRuns);\n    return {\n      string,\n      runs: flatten(runs)\n    };\n  };\n};\n\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n */\n\n/**\n * Breaks attributed string into paragraphs\n */\nconst splitParagraphs = () => {\n  /**\n   * @param {AttributedString} attributedString attributed string\n   * @returns {AttributedString[]} attributed string array\n   */\n  return attributedString => {\n    const res = [];\n    let start = 0;\n    let breakPoint = attributedString.string.indexOf('\\n') + 1;\n    while (breakPoint > 0) {\n      res.push(slice(start, breakPoint, attributedString));\n      start = breakPoint;\n      breakPoint = attributedString.string.indexOf('\\n', breakPoint) + 1;\n    }\n    if (start === 0) {\n      res.push(attributedString);\n    } else if (start < attributedString.string.length) {\n      res.push(slice(start, length$1(attributedString), attributedString));\n    }\n    return res;\n  };\n};\n\n/**\n * @typedef {import('../types.js').Position} Position\n */\n\n/**\n * Return positions advance width\n *\n * @param {Position[]} positions positions\n * @returns {number} advance width\n */\nconst advanceWidth$2 = positions => {\n  return positions.reduce((acc, pos) => acc + (pos.xAdvance || 0), 0);\n};\n\n/**\n * @typedef {import('../types.js').Run} Run\n */\n\n/**\n * Return run advance width\n *\n * @param {Run} run run\n * @returns {number} advance width\n */\nconst advanceWidth$1 = run => {\n  return advanceWidth$2(run.positions || []);\n};\n\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n */\n\n/**\n * Returns attributed string advancewidth\n *\n * @param {AttributedString} attributedString attributed string\n * @returns {number} advance width\n */\nconst advanceWidth = attributedString => {\n  const reducer = (acc, run) => acc + advanceWidth$1(run);\n  return attributedString.runs.reduce(reducer, 0);\n};\n\n/**\n * @typedef {import('../types.js').Glyph} Glyph\n */\n\nconst WHITE_SPACES_CODE = 32;\n\n/**\n * Check if glyph is white space\n *\n * @param {Glyph} [glyph] glyph\n * @returns {boolean} whether glyph is white space\n * */\nconst isWhiteSpace = glyph => {\n  const codePoints = (glyph === null || glyph === void 0 ? void 0 : glyph.codePoints) || [];\n  return codePoints.includes(WHITE_SPACES_CODE);\n};\n\n/**\n * @typedef {import('../types.js').Position} Position\n * @typedef {import('../types.js').Run} Run\n */\n\n/**\n * Get white space leading positions\n *\n * @param {Run} run run\n * @returns {Position[]} white space leading positions\n */\nconst leadingPositions = run => {\n  const glyphs = run.glyphs || [];\n  const positions = run.positions || [];\n  const leadingWhitespaces = glyphs.findIndex(g => !isWhiteSpace(g));\n  return positions.slice(0, leadingWhitespaces);\n};\n\n/**\n * Get run leading white space offset\n *\n * @param {Run} run run\n * @returns {number} leading white space offset\n */\nconst leadingOffset$1 = run => {\n  const positions = leadingPositions(run);\n  return positions.reduce((acc, pos) => acc + (pos.xAdvance || 0), 0);\n};\n\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n */\n\n/**\n * Get attributed string leading white space offset\n *\n * @param {AttributedString} attributedString attributed string\n * @returns {number} leading white space offset\n */\nconst leadingOffset = attributedString => {\n  const runs = attributedString.runs || [];\n  return leadingOffset$1(runs[0]);\n};\n\n/**\n * @typedef {import('../types.js').Position} Position\n * @typedef {import('../types.js').Run} Run\n */\n\n/**\n * @template T\n * @param {T[]} array\n * @returns {T[]} reversed array\n */\nconst reverse = array => {\n  return [...array].reverse();\n};\n\n/**\n * Get white space trailing positions\n *\n * @param {Run} run run\n * @returns {Position[]} white space trailing positions\n */\nconst trailingPositions = run => {\n  const glyphs = reverse(run.glyphs || []);\n  const positions = reverse(run.positions || []);\n  const leadingWhitespaces = glyphs.findIndex(g => !isWhiteSpace(g));\n  return positions.slice(0, leadingWhitespaces);\n};\n\n/**\n * Get run trailing white space offset\n *\n * @param {Run} run run\n * @returns {number} trailing white space offset\n */\nconst trailingOffset$1 = run => {\n  const positions = trailingPositions(run);\n  return positions.reduce((acc, pos) => acc + (pos.xAdvance || 0), 0);\n};\n\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n */\n\n/**\n * Get attributed string trailing white space offset\n *\n * @param {AttributedString} attributedString attributed string\n * @returns {number} trailing white space offset\n */\nconst trailingOffset = attributedString => {\n  const runs = attributedString.runs || [];\n  return trailingOffset$1(last(runs));\n};\n\n/**\n * @typedef {import('../types.js').Run} Run\n */\n\n/**\n * Drop last char of run\n *\n * @param {Run} run run\n * @returns {Run} run without last char\n */\nconst dropLast$1 = run => {\n  return slice$1(0, run.end - run.start - 1, run);\n};\n\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n */\n\n/**\n * Drop last glyph\n *\n * @param {AttributedString} attributedString attributed string\n * @returns {AttributedString} attributed string with new glyph\n */\nconst dropLast = attributedString => {\n  const string = dropLast$2(attributedString.string);\n  const runs = adjust(-1, dropLast$1, attributedString.runs);\n  return Object.assign({}, attributedString, {\n    string,\n    runs\n  });\n};\n\nconst ALIGNMENT_FACTORS = {\n  center: 0.5,\n  right: 1\n};\n\n/**\n * Remove new line char at the end of line if present\n *\n * @param {Object}  line\n * @returns {Object} line\n */\nconst removeNewLine = line => {\n  return last(line.string) === '\\n' ? dropLast(line) : line;\n};\nconst getOverflowLeft = line => {\n  return leadingOffset(line) + (line.overflowLeft || 0);\n};\nconst getOverflowRight = line => {\n  return trailingOffset(line) + (line.overflowRight || 0);\n};\n\n/**\n * Ignore whitespace at the start and end of a line for alignment\n *\n * @param {Object}  line\n * @returns {Object} line\n */\nconst adjustOverflow = line => {\n  const overflowLeft = getOverflowLeft(line);\n  const overflowRight = getOverflowRight(line);\n  const x = line.box.x - overflowLeft;\n  const width = line.box.width + overflowLeft + overflowRight;\n  const box = Object.assign({}, line.box, {\n    x,\n    width\n  });\n  return Object.assign({}, line, {\n    box,\n    overflowLeft,\n    overflowRight\n  });\n};\n\n/**\n * Performs line justification by calling appropiate engine\n *\n * @param {Object} engines engines\n * @param {Object} options layout options\n * @param {string} align text align\n */\nconst justifyLine$1 = (engines, options, align) => {\n  /**\n   * @param {Object} line lint\n   * @returns {Object} line\n   */\n  return line => {\n    const lineWidth = advanceWidth(line);\n    const alignFactor = ALIGNMENT_FACTORS[align] || 0;\n    const remainingWidth = Math.max(0, line.box.width - lineWidth);\n    const shouldJustify = align === 'justify' || lineWidth > line.box.width;\n    const x = line.box.x + remainingWidth * alignFactor;\n    const box = Object.assign({}, line.box, {\n      x\n    });\n    const newLine = Object.assign({}, line, {\n      box\n    });\n    return shouldJustify ? engines.justification(options)(newLine) : newLine;\n  };\n};\nconst finalizeLine = line => {\n  let lineAscent = 0;\n  let lineDescent = 0;\n  let lineHeight = 0;\n  let lineXAdvance = 0;\n  const runs = line.runs.map(run => {\n    const height = height$1(run);\n    const ascent = ascent$1(run);\n    const descent$1 = descent(run);\n    const xAdvance = advanceWidth$1(run);\n    lineHeight = Math.max(lineHeight, height);\n    lineAscent = Math.max(lineAscent, ascent);\n    lineDescent = Math.max(lineDescent, descent$1);\n    lineXAdvance += xAdvance;\n    return Object.assign({}, run, {\n      height,\n      ascent,\n      descent: descent$1,\n      xAdvance\n    });\n  });\n  return Object.assign({}, line, {\n    runs,\n    height: lineHeight,\n    ascent: lineAscent,\n    descent: lineDescent,\n    xAdvance: lineXAdvance\n  });\n};\n\n/**\n * Finalize line by performing line justification\n * and text decoration (using appropiate engines)\n *\n * @param {Object} engines engines\n * @param {Object} options layout options\n */\nconst finalizeBlock = function (engines, options) {\n  if (engines === void 0) {\n    engines = {};\n  }\n  /**\n   * @param {Object} line lint\n   * @param {number} i line index\n   * @param {Object[]} lines total lines\n   * @returns {Object} line\n   */\n  return (line, i, lines) => {\n    var _line$runs, _line$runs$;\n    const isLastFragment = i === lines.length - 1;\n    const style = ((_line$runs = line.runs) === null || _line$runs === void 0 ? void 0 : (_line$runs$ = _line$runs[0]) === null || _line$runs$ === void 0 ? void 0 : _line$runs$.attributes) || {};\n    const align = isLastFragment ? style.alignLastLine : style.align;\n    return compose(finalizeLine, engines.textDecoration(options), justifyLine$1(engines, options, align), adjustOverflow, removeNewLine)(line);\n  };\n};\n\n/**\n * Finalize line block by performing line justification\n * and text decoration (using appropiate engines)\n *\n * @param {Object} engines engines\n * @param {Object} options layout options\n */\nconst finalizeFragments = (engines, options) => {\n  /**\n   * @param {Object[]} blocks line blocks\n   * @returns {Object[]} blocks\n   */\n  return blocks => {\n    const blockFinalizer = finalizeBlock(engines, options);\n    return blocks.map(block => block.map(blockFinalizer));\n  };\n};\n\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n */\n\nconst ATTACHMENT_CODE = 0xfffc; // 65532\n\nconst isReplaceGlyph = glyph => glyph.codePoints.includes(ATTACHMENT_CODE);\n\n/**\n * Resolve attachments of run\n *\n * @param {Object}  run\n * @returns {Object} run\n */\nconst resolveRunAttachments = run => {\n  var _run$attributes;\n  if (!run.positions) return run;\n  const glyphs = run.glyphs || [];\n  const attachment = ((_run$attributes = run.attributes) === null || _run$attributes === void 0 ? void 0 : _run$attributes.attachment) || {};\n  const positions = run.positions.map((position, i) => {\n    const glyph = glyphs[i];\n    if (attachment && attachment.width && isReplaceGlyph(glyph)) {\n      return Object.assign({}, position, {\n        xAdvance: attachment.width\n      });\n    }\n    return Object.assign({}, position);\n  });\n  return Object.assign({}, run, {\n    positions\n  });\n};\n\n/**\n * Resolve attachments for multiple paragraphs\n */\nconst resolveAttachments = () => {\n  /**\n   * @param {AttributedString} attributedString attributed string\n   * @returns {AttributedString} attributed string\n   */\n  return attributedString => {\n    const runs = attributedString.runs.map(resolveRunAttachments);\n    return Object.assign({}, attributedString, {\n      runs\n    });\n  };\n};\n\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n * @typedef {import('../types.js').Attributes} Attributes\n * @typedef {import('../types.js').Run} Run\n */\n\n/**\n * @param {Attributes} a attributes\n * @returns {Attributes} attributes with defaults\n */\nconst applyAttributes = a => {\n  return {\n    align: a.align || (a.direction === 'rtl' ? 'right' : 'left'),\n    alignLastLine: a.alignLastLine || (a.align === 'justify' ? 'left' : a.align || 'left'),\n    attachment: a.attachment || null,\n    backgroundColor: a.backgroundColor || null,\n    bullet: a.bullet || null,\n    characterSpacing: a.characterSpacing || 0,\n    color: a.color || 'black',\n    direction: a.direction || 'ltr',\n    features: a.features || [],\n    fill: a.fill !== false,\n    font: a.font || null,\n    fontSize: a.fontSize || 12,\n    hangingPunctuation: a.hangingPunctuation || false,\n    hyphenationFactor: a.hyphenationFactor || 0,\n    indent: a.indent || 0,\n    justificationFactor: a.justificationFactor || 1,\n    lineHeight: a.lineHeight || null,\n    lineSpacing: a.lineSpacing || 0,\n    link: a.link || null,\n    marginLeft: a.marginLeft || a.margin || 0,\n    marginRight: a.marginRight || a.margin || 0,\n    opacity: a.opacity,\n    paddingTop: a.paddingTop || a.padding || 0,\n    paragraphSpacing: a.paragraphSpacing || 0,\n    script: a.script || null,\n    shrinkFactor: a.shrinkFactor || 0,\n    strike: a.strike || false,\n    strikeColor: a.strikeColor || a.color || 'black',\n    strikeStyle: a.strikeStyle || 'solid',\n    stroke: a.stroke || false,\n    underline: a.underline || false,\n    underlineColor: a.underlineColor || a.color || 'black',\n    underlineStyle: a.underlineStyle || 'solid',\n    verticalAlign: a.verticalAlign || null,\n    wordSpacing: a.wordSpacing || 0,\n    yOffset: a.yOffset || 0\n  };\n};\n\n/**\n * Apply default style to run\n *\n * @param {Run} run run\n * @returns {Run} run with styles\n */\nconst applyRunStyles = run => {\n  const attributes = applyAttributes(run.attributes);\n  return Object.assign({}, run, {\n    attributes\n  });\n};\n\n/**\n * Apply default attributes for an attributed string\n */\nconst applyDefaultStyles = () => {\n  /**\n   * @param {AttributedString} attributedString attributed string\n   * @returns {AttributedString} attributed string\n   */\n  return attributedString => {\n    const string = attributedString.string || '';\n    const runs = (attributedString.runs || []).map(applyRunStyles);\n    return {\n      string,\n      runs\n    };\n  };\n};\n\n/* eslint-disable no-restricted-syntax */\n\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n */\n\n/**\n * Apply scaling and yOffset for verticalAlign 'sub' and 'super'.\n */\nconst verticalAlignment = () => {\n  /**\n   * @param {AttributedString} attributedString attributed string\n   * @returns {AttributedString} attributed string\n   */\n  return attributedString => {\n    attributedString.runs.forEach(run => {\n      const {\n        attributes\n      } = run;\n      const {\n        verticalAlign\n      } = attributes;\n      if (verticalAlign === 'sub') {\n        attributes.yOffset = -0.2;\n      } else if (verticalAlign === 'super') {\n        attributes.yOffset = 0.4;\n      }\n    });\n    return attributedString;\n  };\n};\n\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n * @typedef {import('../types.js').Run} Run\n */\n\nconst bidi$1 = bidiFactory();\n\n/**\n * @param {Run[]} runs\n * @returns {number[]} bidi levels\n */\nconst getBidiLevels = runs => {\n  return runs.reduce((acc, run) => {\n    const length = run.end - run.start;\n    const levels = repeat(run.attributes.bidiLevel, length);\n    return acc.concat(levels);\n  }, []);\n};\n\n/**\n * Perform bidi mirroring\n */\nconst mirrorString = () => {\n  /**\n   * @param {AttributedString} attributedString attributed string\n   * @returns {AttributedString} attributed string\n   */\n  return attributedString => {\n    const levels = getBidiLevels(attributedString.runs);\n    let updatedString = '';\n    attributedString.string.split('').forEach((char, index) => {\n      const isRTL = levels[index] % 2 === 1;\n      const mirroredChar = isRTL ? bidi$1.getMirroredCharacter(attributedString.string.charAt(index)) : null;\n      updatedString += mirroredChar || char;\n    });\n    return {\n      ...attributedString,\n      string: updatedString,\n      levels\n    };\n  };\n};\n\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n * @typedef {import('../types.js').Rect} Rect\n */\n\n/**\n * A LayoutEngine is the main object that performs text layout.\n * It accepts an AttributedString and a Container object\n * to layout text into, and uses several helper objects to perform\n * various layout tasks. These objects can be overridden to customize\n * layout behavior.\n *\n * @param {Object} engines engines\n */\nconst layoutEngine = engines => {\n  /**\n   * @param {AttributedString} attributedString attributed string\n   * @param {Rect} container container rect\n   * @param {Object} options layout options\n   * @returns {Object[]} paragraph blocks\n   */\n  return function (attributedString, container, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    const processParagraph = compose(resolveYOffset(), resolveAttachments(), verticalAlignment(), wrapWords(engines, options), generateGlyphs(), mirrorString(), preprocessRuns(engines, options));\n    const processParagraphs = paragraphs => paragraphs.map(processParagraph);\n    return compose(finalizeFragments(engines, options), bidiReordering(), typesetter(engines, options, container), processParagraphs, splitParagraphs(), applyDefaultStyles())(attributedString);\n  };\n};\n\nconst bidi = bidiFactory();\n\n/**\n * @param  {Object}  layout options\n * @param  {Object}  attributed string\n * @return {Object} attributed string\n */\nconst bidiEngine = () => attributedString => {\n  var _attributedString$run;\n  const {\n    string\n  } = attributedString;\n  const direction = (_attributedString$run = attributedString.runs[0]) === null || _attributedString$run === void 0 ? void 0 : _attributedString$run.attributes.direction;\n  const {\n    levels\n  } = bidi.getEmbeddingLevels(string, direction);\n  let lastLevel = null;\n  let lastIndex = 0;\n  let index = 0;\n  const res = [];\n  for (let i = 0; i < levels.length; i += 1) {\n    const level = levels[i];\n    if (level !== lastLevel) {\n      if (lastLevel !== null) {\n        res.push({\n          start: lastIndex,\n          end: index,\n          attributes: {\n            bidiLevel: lastLevel\n          }\n        });\n      }\n      lastIndex = index;\n      lastLevel = level;\n    }\n    index += 1;\n  }\n  if (lastIndex < string.length) {\n    res.push({\n      start: lastIndex,\n      end: string.length,\n      attributes: {\n        bidiLevel: lastLevel\n      }\n    });\n  }\n  return {\n    string,\n    runs: res\n  };\n};\n\n/* eslint-disable no-plusplus */\nconst INFINITY = 10000;\n\n/**\n * @param {Object[]} subnodes\n * @param {number[]} widths\n * @param {number} lineNumber\n * @returns {number}\n */\nconst getNextBreakpoint = (subnodes, widths, lineNumber) => {\n  let position = null;\n  let minimumBadness = Infinity;\n  const sum = {\n    width: 0,\n    stretch: 0,\n    shrink: 0\n  };\n  const lineLength = widths[Math.min(lineNumber, widths.length - 1)];\n  const calculateRatio = node => {\n    if (sum.width < lineLength) {\n      return sum.stretch - node.stretch > 0 ? (lineLength - sum.width) / sum.stretch : INFINITY;\n    }\n    if (sum.width > lineLength) {\n      return sum.shrink - node.shrink > 0 ? (lineLength - sum.width) / sum.shrink : INFINITY;\n    }\n    return 0;\n  };\n  for (let i = 0; i < subnodes.length; i += 1) {\n    const node = subnodes[i];\n    if (node.type === 'box') {\n      sum.width += node.width;\n    } else if (node.type === 'glue') {\n      sum.width += node.width;\n      sum.stretch += node.stretch;\n      sum.shrink += node.shrink;\n    }\n    if (sum.width - sum.shrink > lineLength) {\n      if (position === null) {\n        let j = i === 0 ? i + 1 : i;\n        while (j < subnodes.length && (subnodes[j].type === 'glue' || subnodes[j].type === 'penalty')) {\n          j++;\n        }\n        position = j - 1;\n      }\n      break;\n    }\n    if (node.type === 'penalty' || node.type === 'glue') {\n      const ratio = calculateRatio(node);\n      const penalty = node.type === 'penalty' ? node.penalty : 0;\n      const badness = 100 * Math.abs(ratio) ** 3 + penalty;\n      if (minimumBadness >= badness) {\n        position = i;\n        minimumBadness = badness;\n      }\n    }\n  }\n  return sum.width - sum.shrink > lineLength ? position : null;\n};\n\n/**\n * @param {Object[]} nodes\n * @param {number[]} widths\n */\nconst applyBestFit = (nodes, widths) => {\n  let count = 0;\n  let lineNumber = 0;\n  let subnodes = nodes;\n  const breakpoints = [{\n    position: 0\n  }];\n  while (subnodes.length > 0) {\n    const breakpoint = getNextBreakpoint(subnodes, widths, lineNumber);\n    if (breakpoint !== null) {\n      count += breakpoint;\n      breakpoints.push({\n        position: count\n      });\n      subnodes = subnodes.slice(breakpoint + 1, subnodes.length);\n      count++;\n      lineNumber++;\n    } else {\n      subnodes = [];\n    }\n  }\n  return breakpoints;\n};\n\n/* eslint-disable no-param-reassign */\n/* eslint-disable max-classes-per-file */\nclass Node {\n  constructor(data) {\n    this.prev = null;\n    this.next = null;\n    this.data = data;\n  }\n  toString() {\n    return this.data.toString();\n  }\n}\nclass LinkedList {\n  constructor() {\n    this.head = null;\n    this.tail = null;\n    this.listSize = 0;\n    this.listLength = 0;\n  }\n  isLinked(node) {\n    return !(node && node.prev === null && node.next === null && this.tail !== node && this.head !== node || this.isEmpty());\n  }\n  size() {\n    return this.listSize;\n  }\n  isEmpty() {\n    return this.listSize === 0;\n  }\n  first() {\n    return this.head;\n  }\n  last() {\n    return this.last;\n  }\n  toString() {\n    return this.toArray().toString();\n  }\n  toArray() {\n    let node = this.head;\n    const result = [];\n    while (node !== null) {\n      result.push(node);\n      node = node.next;\n    }\n    return result;\n  }\n  forEach(fun) {\n    let node = this.head;\n    while (node !== null) {\n      fun(node);\n      node = node.next;\n    }\n  }\n  contains(n) {\n    let node = this.head;\n    if (!this.isLinked(n)) {\n      return false;\n    }\n    while (node !== null) {\n      if (node === n) {\n        return true;\n      }\n      node = node.next;\n    }\n    return false;\n  }\n  at(i) {\n    let node = this.head;\n    let index = 0;\n    if (i >= this.listLength || i < 0) {\n      return null;\n    }\n    while (node !== null) {\n      if (i === index) {\n        return node;\n      }\n      node = node.next;\n      index += 1;\n    }\n    return null;\n  }\n  insertAfter(node, newNode) {\n    if (!this.isLinked(node)) {\n      return this;\n    }\n    newNode.prev = node;\n    newNode.next = node.next;\n    if (node.next === null) {\n      this.tail = newNode;\n    } else {\n      node.next.prev = newNode;\n    }\n    node.next = newNode;\n    this.listSize += 1;\n    return this;\n  }\n  insertBefore(node, newNode) {\n    if (!this.isLinked(node)) {\n      return this;\n    }\n    newNode.prev = node.prev;\n    newNode.next = node;\n    if (node.prev === null) {\n      this.head = newNode;\n    } else {\n      node.prev.next = newNode;\n    }\n    node.prev = newNode;\n    this.listSize += 1;\n    return this;\n  }\n  push(node) {\n    if (this.head === null) {\n      this.unshift(node);\n    } else {\n      this.insertAfter(this.tail, node);\n    }\n    return this;\n  }\n  unshift(node) {\n    if (this.head === null) {\n      this.head = node;\n      this.tail = node;\n      node.prev = null;\n      node.next = null;\n      this.listSize += 1;\n    } else {\n      this.insertBefore(this.head, node);\n    }\n    return this;\n  }\n  remove(node) {\n    if (!this.isLinked(node)) {\n      return this;\n    }\n    if (node.prev === null) {\n      this.head = node.next;\n    } else {\n      node.prev.next = node.next;\n    }\n    if (node.next === null) {\n      this.tail = node.prev;\n    } else {\n      node.next.prev = node.prev;\n    }\n    this.listSize -= 1;\n    return this;\n  }\n  pop() {\n    const node = this.tail;\n    this.tail.prev.next = null;\n    this.tail = this.tail.prev;\n    this.listSize -= 1;\n    node.prev = null;\n    node.next = null;\n    return node;\n  }\n  shift() {\n    const node = this.head;\n    this.head.next.prev = null;\n    this.head = this.head.next;\n    this.listSize -= 1;\n    node.prev = null;\n    node.next = null;\n    return node;\n  }\n}\nLinkedList.Node = Node;\n\n/* eslint-disable no-restricted-properties */\n\n/**\n * @param {Object[]} nodes\n * @param {number[]} lines\n * @param {Object} settings\n * @preserve Knuth and Plass line breaking algorithm in JavaScript\n *\n * Licensed under the new BSD License.\n * Copyright 2009-2010, Bram Stein\n * All rights reserved.\n */\nconst linebreak = (nodes, lines, settings) => {\n  const options = {\n    demerits: {\n      line: settings && settings.demerits && settings.demerits.line || 10,\n      flagged: settings && settings.demerits && settings.demerits.flagged || 100,\n      fitness: settings && settings.demerits && settings.demerits.fitness || 3000\n    },\n    tolerance: settings && settings.tolerance || 3\n  };\n  const activeNodes = new LinkedList();\n  const sum = {\n    width: 0,\n    stretch: 0,\n    shrink: 0\n  };\n  const lineLengths = lines;\n  const breaks = [];\n  let tmp = {\n    data: {\n      demerits: Infinity\n    }\n  };\n  function breakpoint(position, demerits, ratio, line, fitnessClass, totals, previous) {\n    return {\n      position,\n      demerits,\n      ratio,\n      line,\n      fitnessClass,\n      totals: totals || {\n        width: 0,\n        stretch: 0,\n        shrink: 0\n      },\n      previous\n    };\n  }\n  function computeCost(start, end, active, currentLine) {\n    let width = sum.width - active.totals.width;\n    let stretch = 0;\n    let shrink = 0;\n    // If the current line index is within the list of linelengths, use it, otherwise use\n    // the last line length of the list.\n    const lineLength = currentLine < lineLengths.length ? lineLengths[currentLine - 1] : lineLengths[lineLengths.length - 1];\n    if (nodes[end].type === 'penalty') {\n      width += nodes[end].width;\n    }\n    if (width < lineLength) {\n      // Calculate the stretch ratio\n      stretch = sum.stretch - active.totals.stretch;\n      if (stretch > 0) {\n        return (lineLength - width) / stretch;\n      }\n      return linebreak.infinity;\n    }\n    if (width > lineLength) {\n      // Calculate the shrink ratio\n      shrink = sum.shrink - active.totals.shrink;\n      if (shrink > 0) {\n        return (lineLength - width) / shrink;\n      }\n      return linebreak.infinity;\n    }\n\n    // perfect match\n    return 0;\n  }\n\n  // Add width, stretch and shrink values from the current\n  // break point up to the next box or forced penalty.\n  function computeSum(breakPointIndex) {\n    const result = {\n      width: sum.width,\n      stretch: sum.stretch,\n      shrink: sum.shrink\n    };\n    for (let i = breakPointIndex; i < nodes.length; i += 1) {\n      if (nodes[i].type === 'glue') {\n        result.width += nodes[i].width;\n        result.stretch += nodes[i].stretch;\n        result.shrink += nodes[i].shrink;\n      } else if (nodes[i].type === 'box' || nodes[i].type === 'penalty' && nodes[i].penalty === -linebreak.infinity && i > breakPointIndex) {\n        break;\n      }\n    }\n    return result;\n  }\n\n  // The main loop of the algorithm\n  // eslint-disable-next-line no-shadow\n  function mainLoop(node, index, nodes) {\n    let active = activeNodes.first();\n    let next = null;\n    let ratio = 0;\n    let demerits = 0;\n    /**\n     * @type {Object[]}\n     */\n    let candidates = [];\n    let badness;\n    let currentLine = 0;\n    let tmpSum;\n    let currentClass = 0;\n    let fitnessClass;\n    /**\n     * @type {Object}\n     */\n    let candidate;\n    let newNode;\n\n    // The inner loop iterates through all the active nodes with line < currentLine and then\n    // breaks out to insert the new active node candidates before looking at the next active\n    // nodes for the next lines. The result of this is that the active node list is always\n    // sorted by line number.\n    while (active !== null) {\n      candidates = [{\n        demerits: Infinity\n      }, {\n        demerits: Infinity\n      }, {\n        demerits: Infinity\n      }, {\n        demerits: Infinity\n      }];\n\n      // Iterate through the linked list of active nodes to find new potential active nodes\n      // and deactivate current active nodes.\n      while (active !== null) {\n        next = active.next;\n        currentLine = active.data.line + 1;\n        ratio = computeCost(active.data.position, index, active.data, currentLine);\n\n        // Deactive nodes when the distance between the current active node and the\n        // current node becomes too large (i.e. it exceeds the stretch limit and the stretch\n        // ratio becomes negative) or when the current node is a forced break (i.e. the end\n        // of the paragraph when we want to remove all active nodes, but possibly have a final\n        // candidate active node---if the paragraph can be set using the given tolerance value.)\n        if (ratio < -1 || node.type === 'penalty' && node.penalty === -linebreak.infinity) {\n          activeNodes.remove(active);\n        }\n\n        // If the ratio is within the valid range of -1 <= ratio <= tolerance calculate the\n        // total demerits and record a candidate active node.\n        if (ratio >= -1 && ratio <= options.tolerance) {\n          badness = 100 * Math.pow(Math.abs(ratio), 3);\n\n          // Positive penalty\n          if (node.type === 'penalty' && node.penalty >= 0) {\n            demerits = Math.pow(options.demerits.line + badness, 2) + Math.pow(node.penalty, 2);\n            // Negative penalty but not a forced break\n          } else if (node.type === 'penalty' && node.penalty !== -linebreak.infinity) {\n            demerits = Math.pow(options.demerits.line + badness, 2) - Math.pow(node.penalty, 2);\n            // All other cases\n          } else {\n            demerits = Math.pow(options.demerits.line + badness, 2);\n          }\n          if (node.type === 'penalty' && nodes[active.data.position].type === 'penalty') {\n            demerits += options.demerits.flagged * node.flagged * nodes[active.data.position].flagged;\n          }\n\n          // Calculate the fitness class for this candidate active node.\n          if (ratio < -0.5) {\n            currentClass = 0;\n          } else if (ratio <= 0.5) {\n            currentClass = 1;\n          } else if (ratio <= 1) {\n            currentClass = 2;\n          } else {\n            currentClass = 3;\n          }\n\n          // Add a fitness penalty to the demerits if the fitness classes of two adjacent lines\n          // differ too much.\n          if (Math.abs(currentClass - active.data.fitnessClass) > 1) {\n            demerits += options.demerits.fitness;\n          }\n\n          // Add the total demerits of the active node to get the total demerits of this candidate node.\n          demerits += active.data.demerits;\n\n          // Only store the best candidate for each fitness class\n          if (demerits < candidates[currentClass].demerits) {\n            candidates[currentClass] = {\n              active,\n              demerits,\n              ratio\n            };\n          }\n        }\n        active = next;\n\n        // Stop iterating through active nodes to insert new candidate active nodes in the active list\n        // before moving on to the active nodes for the next line.\n        // TODO: The Knuth and Plass paper suggests a conditional for currentLine < j0. This means paragraphs\n        // with identical line lengths will not be sorted by line number. Find out if that is a desirable outcome.\n        // For now I left this out, as it only adds minimal overhead to the algorithm and keeping the active node\n        // list sorted has a higher priority.\n        if (active !== null && active.data.line >= currentLine) {\n          break;\n        }\n      }\n      tmpSum = computeSum(index);\n      for (fitnessClass = 0; fitnessClass < candidates.length; fitnessClass += 1) {\n        candidate = candidates[fitnessClass];\n        if (candidate.demerits < Infinity) {\n          newNode = new LinkedList.Node(breakpoint(index, candidate.demerits, candidate.ratio, candidate.active.data.line + 1, fitnessClass, tmpSum, candidate.active));\n          if (active !== null) {\n            activeNodes.insertBefore(active, newNode);\n          } else {\n            activeNodes.push(newNode);\n          }\n        }\n      }\n    }\n  }\n\n  // Add an active node for the start of the paragraph.\n  activeNodes.push(new LinkedList.Node(breakpoint(0, 0, 0, 0, 0, undefined, null)));\n\n  // eslint-disable-next-line no-shadow\n  nodes.forEach((node, index, nodes) => {\n    if (node.type === 'box') {\n      sum.width += node.width;\n    } else if (node.type === 'glue') {\n      if (index > 0 && nodes[index - 1].type === 'box') {\n        mainLoop(node, index, nodes);\n      }\n      sum.width += node.width;\n      sum.stretch += node.stretch;\n      sum.shrink += node.shrink;\n    } else if (node.type === 'penalty' && node.penalty !== linebreak.infinity) {\n      mainLoop(node, index, nodes);\n    }\n  });\n  if (activeNodes.size() !== 0) {\n    // Find the best active node (the one with the least total demerits.)\n    activeNodes.forEach(node => {\n      if (node.data.demerits < tmp.data.demerits) {\n        tmp = node;\n      }\n    });\n    while (tmp !== null) {\n      breaks.push({\n        position: tmp.data.position,\n        ratio: tmp.data.ratio\n      });\n      tmp = tmp.data.previous;\n    }\n    return breaks.reverse();\n  }\n  return [];\n};\nlinebreak.infinity = 10000;\nlinebreak.glue = (width, value, stretch, shrink) => ({\n  type: 'glue',\n  value,\n  width,\n  stretch,\n  shrink\n});\nlinebreak.box = function (width, value, hyphenated) {\n  if (hyphenated === void 0) {\n    hyphenated = false;\n  }\n  return {\n    type: 'box',\n    width,\n    value,\n    hyphenated\n  };\n};\nlinebreak.penalty = (width, penalty, flagged) => ({\n  type: 'penalty',\n  width,\n  penalty,\n  flagged\n});\n\n/**\n * @typedef {import('../types.js').Run} Run\n */\n\n/**\n * Add scalar to run\n *\n * @param {number} n scalar\n * @param {Run} run run\n * @returns {Run} added run\n */\nconst add = (n, run) => {\n  const start = run.start + n;\n  const end = run.end + n;\n  return Object.assign({}, run, {\n    start,\n    end\n  });\n};\n\n/**\n * @typedef {import('../types.js').Run} Run\n */\n\n/**\n * Get run length\n *\n * @param {Run} run run\n * @returns {number} length\n */\nconst length = run => {\n  return run.end - run.start;\n};\n\n/**\n * @typedef {import('../types.js').Run} Run\n */\n\n/**\n * Concats two runs into one\n *\n * @param {Run} runA first run\n * @param {Run} runB second run\n * @returns {Run} concatenated run\n */\nconst concat = (runA, runB) => {\n  const end = runA.end + length(runB);\n  const glyphs = (runA.glyphs || []).concat(runB.glyphs || []);\n  const positions = (runA.positions || []).concat(runB.positions || []);\n  const attributes = Object.assign({}, runA.attributes, runB.attributes);\n  const runAIndices = runA.glyphIndices || [];\n  const runALastIndex = last(runAIndices) || 0;\n  const runBIndices = (runB.glyphIndices || []).map(i => i + runALastIndex + 1);\n  const glyphIndices = normalize(runAIndices.concat(runBIndices));\n  return Object.assign({}, runA, {\n    end,\n    glyphs,\n    positions,\n    attributes,\n    glyphIndices\n  });\n};\n\n/**\n * @typedef {import('../types.js').Glyph} Glyph\n * @typedef {import('../types.js').Run} Run\n */\n\n/**\n * Insert glyph to run in the given index\n *\n * @param {number} index index\n * @param {Glyph} glyph glyph\n * @param {Run} run run\n * @returns {Run} run with glyph\n */\nconst insertGlyph$1 = (index, glyph, run) => {\n  if (!glyph) return run;\n\n  // Split resolves ligature splitting in case new glyph breaks some\n  const leadingRun = slice$1(0, index, run);\n  const trailingRun = slice$1(index, Infinity, run);\n  return concat(append$1(glyph, leadingRun), trailingRun);\n};\n\n/**\n * Insert either glyph or code point to run in the given index\n *\n * @param {number} index index\n * @param {Glyph | number} value glyph or codePoint\n * @param {Run} run run\n * @returns {Run} run with glyph\n */\nconst insert = (index, value, run) => {\n  const font = getFont(run);\n  const glyph = isNumber(value) ? fromCodePoint(value, font) : value;\n  return insertGlyph$1(index, glyph, run);\n};\n\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n */\n\n/**\n * Get run index at char index\n *\n * @param {number} n char index\n * @param {AttributedString} string attributed string\n * @returns {number} run index\n */\nconst runIndexAt = (n, string) => {\n  return runIndexAt$1(n, string.runs);\n};\n\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n * @typedef {import('../types.js').Glyph} Glyph\n */\n\n/**\n * Insert glyph into attributed string\n *\n * @param {number} index index\n * @param {Glyph} glyph glyph\n * @param {AttributedString} attributedString attributed string\n * @returns {AttributedString} attributed string with new glyph\n */\nconst insertGlyph = (index, glyph, attributedString) => {\n  const runIndex = runIndexAt(index, attributedString);\n\n  // Add glyph to the end if run index invalid\n  if (runIndex === -1) return append(glyph, attributedString);\n  const codePoints = (glyph === null || glyph === void 0 ? void 0 : glyph.codePoints) || [];\n  const string = attributedString.string.slice(0, index) + stringFromCodePoints(codePoints) + attributedString.string.slice(index);\n  const runs = attributedString.runs.map((run, i) => {\n    if (i === runIndex) return insert(index - run.start, glyph, run);\n    if (i > runIndex) return add(codePoints.length, run);\n    return run;\n  });\n  return Object.assign({}, attributedString, {\n    string,\n    runs\n  });\n};\n\n/**\n * @typedef {import('../types.js').Run} Run\n */\n\n/**\n * Advance width between two string indices\n *\n * @param {number} start glyph index\n * @param {number} end glyph index\n * @param {Run} run run\n * @returns {number} advanced width run\n */\nconst advanceWidthBetween$1 = (start, end, run) => {\n  const runStart = run.start || 0;\n  const glyphStartIndex = Math.max(0, glyphIndexAt(start - runStart, run));\n  const glyphEndIndex = Math.max(0, glyphIndexAt(end - runStart, run));\n  const positions = (run.positions || []).slice(glyphStartIndex, glyphEndIndex);\n  return advanceWidth$2(positions);\n};\n\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n */\n\n/**\n * Advance width between start and end\n * Does not consider ligature splitting for the moment.\n * Check performance impact on supporting this\n *\n * @param {number} start offset\n * @param {number} end offset\n * @param {AttributedString} attributedString\n * @returns {number} advance width\n */\nconst advanceWidthBetween = (start, end, attributedString) => {\n  const runs = filter(start, end, attributedString.runs);\n  return runs.reduce((acc, run) => acc + advanceWidthBetween$1(start, end, run), 0);\n};\n\n/**\n * @typedef {import('../../types.js').AttributedString} AttributedString\n * @typedef {import('../../types.js').Attributes} Attributes\n */\n\nconst HYPHEN = 0x002d;\nconst TOLERANCE_STEPS = 5;\nconst TOLERANCE_LIMIT = 50;\nconst opts = {\n  width: 3,\n  stretch: 6,\n  shrink: 9\n};\n\n/**\n * Slice attributed string to many lines\n *\n * @param {AttributedString} string attributed string\n * @param {Object[]} nodes\n * @param {Object[]} breaks\n * @returns {AttributedString[]} attributed strings\n */\nconst breakLines = (string, nodes, breaks) => {\n  let start = 0;\n  let end = null;\n  const lines = breaks.reduce((acc, breakPoint) => {\n    const node = nodes[breakPoint.position];\n    const prevNode = nodes[breakPoint.position - 1];\n\n    // Last breakpoint corresponds to K&P mandatory final glue\n    if (breakPoint.position === nodes.length - 1) return acc;\n    let line;\n    if (node.type === 'penalty') {\n      end = prevNode.value.end;\n      line = slice(start, end, string);\n      line = insertGlyph(line.length, HYPHEN, line);\n    } else {\n      end = node.value.end;\n      line = slice(start, end, string);\n    }\n    start = end;\n    return [...acc, line];\n  }, []);\n\n  // Last line\n  lines.push(slice(start, string.string.length, string));\n  return lines;\n};\n\n/**\n * Return Knuth & Plass nodes based on line and previously calculated syllables\n *\n * @param {AttributedString} attributedString attributed string\n * @param {Object} args attributed string args\n * @param {Object} options layout options\n * @returns {Object[]} attributed strings\n */\nconst getNodes = (attributedString, _ref, options) => {\n  let {\n    align\n  } = _ref;\n  let start = 0;\n  const hyphenWidth = 5;\n  const {\n    syllables\n  } = attributedString;\n  const hyphenPenalty = options.hyphenationPenalty || (align === 'justify' ? 100 : 600);\n  const result = syllables.reduce((acc, s, index) => {\n    const width = advanceWidthBetween(start, start + s.length, attributedString);\n    if (s.trim() === '') {\n      const stretch = width * opts.width / opts.stretch;\n      const shrink = width * opts.width / opts.shrink;\n      const value = {\n        start,\n        end: start + s.length\n      };\n      acc.push(linebreak.glue(width, value, stretch, shrink));\n    } else {\n      const hyphenated = syllables[index + 1] !== ' ';\n      const value = {\n        start,\n        end: start + s.length\n      };\n      acc.push(linebreak.box(width, value, hyphenated));\n      if (syllables[index + 1] && hyphenated) {\n        acc.push(linebreak.penalty(hyphenWidth, hyphenPenalty, 1));\n      }\n    }\n    start += s.length;\n    return acc;\n  }, []);\n  result.push(linebreak.glue(0, null, linebreak.infinity, 0));\n  result.push(linebreak.penalty(0, -linebreak.infinity, 1));\n  return result;\n};\n\n/**\n * @param {AttributedString} attributedString attributed string\n * @returns {Attributes} styles\n */\nconst getStyles = attributedString => {\n  var _attributedString$run, _attributedString$run2;\n  return ((_attributedString$run = attributedString.runs) === null || _attributedString$run === void 0 ? void 0 : (_attributedString$run2 = _attributedString$run[0]) === null || _attributedString$run2 === void 0 ? void 0 : _attributedString$run2.attributes) || {};\n};\n\n/**\n * Performs Knuth & Plass line breaking algorithm\n * Fallbacks to best fit algorithm if latter not successful\n *\n * @param {Object} options layout options\n */\nconst linebreaker = options => {\n  /**\n   * @param {AttributedString} attributedString attributed string\n   * @param {number[]} availableWidths available widths\n   * @returns {AttributedString[]} attributed strings\n   */\n  return (attributedString, availableWidths) => {\n    let tolerance = options.tolerance || 4;\n    const style = getStyles(attributedString);\n    const nodes = getNodes(attributedString, style, options);\n\n    /** @type {Object[]} */\n    let breaks = linebreak(nodes, availableWidths, {\n      tolerance\n    });\n\n    // Try again with a higher tolerance if the line breaking failed.\n    while (breaks.length === 0 && tolerance < TOLERANCE_LIMIT) {\n      tolerance += TOLERANCE_STEPS;\n      breaks = linebreak(nodes, availableWidths, {\n        tolerance\n      });\n    }\n    if (breaks.length === 0 || breaks.length === 1 && breaks[0].position === 0) {\n      breaks = applyBestFit(nodes, availableWidths);\n    }\n    return breakLines(attributedString, nodes, breaks.slice(1));\n  };\n};\n\nconst WHITESPACE_PRIORITY = 1;\nconst LETTER_PRIORITY = 2;\nconst EXPAND_WHITESPACE_FACTOR = {\n  before: 0.5,\n  after: 0.5,\n  priority: WHITESPACE_PRIORITY,\n  unconstrained: false\n};\nconst EXPAND_CHAR_FACTOR = {\n  before: 0.14453125,\n  // 37/256\n  after: 0.14453125,\n  priority: LETTER_PRIORITY,\n  unconstrained: false\n};\nconst SHRINK_WHITESPACE_FACTOR = {\n  before: -0.04296875,\n  // -11/256\n  after: -0.04296875,\n  priority: WHITESPACE_PRIORITY,\n  unconstrained: false\n};\nconst SHRINK_CHAR_FACTOR = {\n  before: -0.04296875,\n  after: -0.04296875,\n  priority: LETTER_PRIORITY,\n  unconstrained: false\n};\nconst getCharFactor = (direction, options) => {\n  const expandCharFactor = options.expandCharFactor || {};\n  const shrinkCharFactor = options.shrinkCharFactor || {};\n  return direction === 'GROW' ? Object.assign({}, EXPAND_CHAR_FACTOR, expandCharFactor) : Object.assign({}, SHRINK_CHAR_FACTOR, shrinkCharFactor);\n};\nconst getWhitespaceFactor = (direction, options) => {\n  const expandWhitespaceFactor = options.expandWhitespaceFactor || {};\n  const shrinkWhitespaceFactor = options.shrinkWhitespaceFactor || {};\n  return direction === 'GROW' ? Object.assign({}, EXPAND_WHITESPACE_FACTOR, expandWhitespaceFactor) : Object.assign({}, SHRINK_WHITESPACE_FACTOR, shrinkWhitespaceFactor);\n};\nconst factor = (direction, options) => glyphs => {\n  const charFactor = getCharFactor(direction, options);\n  const whitespaceFactor = getWhitespaceFactor(direction, options);\n  const factors = [];\n  for (let index = 0; index < glyphs.length; index += 1) {\n    let f;\n    const glyph = glyphs[index];\n    if (isWhiteSpace(glyph)) {\n      f = Object.assign({}, whitespaceFactor);\n      if (index === glyphs.length - 1) {\n        f.before = 0;\n        if (index > 0) {\n          factors[index - 1].after = 0;\n        }\n      }\n    } else if (glyph.isMark && index > 0) {\n      f = Object.assign({}, factors[index - 1]);\n      f.before = 0;\n      factors[index - 1].after = 0;\n    } else {\n      f = Object.assign({}, charFactor);\n    }\n    factors.push(f);\n  }\n  return factors;\n};\nconst getFactors = (gap, line, options) => {\n  const direction = gap > 0 ? 'GROW' : 'SHRINK';\n  const getFactor = factor(direction, options);\n  const factors = line.runs.reduce((acc, run) => {\n    return acc.concat(getFactor(run.glyphs));\n  }, []);\n  factors[0].before = 0;\n  factors[factors.length - 1].after = 0;\n  return factors;\n};\n\n/* eslint-disable no-multi-assign */\nconst KASHIDA_PRIORITY = 0;\nconst NULL_PRIORITY = 3;\nconst getDistances = (gap, factors) => {\n  let total = 0;\n  const priorities = [];\n  const unconstrained = [];\n  for (let priority = KASHIDA_PRIORITY; priority <= NULL_PRIORITY; priority += 1) {\n    priorities[priority] = unconstrained[priority] = 0;\n  }\n\n  // sum the factors at each priority\n  for (let j = 0; j < factors.length; j += 1) {\n    const f = factors[j];\n    const sum = f.before + f.after;\n    total += sum;\n    priorities[f.priority] += sum;\n    if (f.unconstrained) {\n      unconstrained[f.priority] += sum;\n    }\n  }\n\n  // choose the priorities that need to be applied\n  let highestPriority = -1;\n  let highestPrioritySum = 0;\n  let remainingGap = gap;\n  let priority;\n  for (priority = KASHIDA_PRIORITY; priority <= NULL_PRIORITY; priority += 1) {\n    const prioritySum = priorities[priority];\n    if (prioritySum !== 0) {\n      if (highestPriority === -1) {\n        highestPriority = priority;\n        highestPrioritySum = prioritySum;\n      }\n\n      // if this priority covers the remaining gap, we're done\n      if (Math.abs(remainingGap) <= Math.abs(prioritySum)) {\n        priorities[priority] = remainingGap / prioritySum;\n        unconstrained[priority] = 0;\n        remainingGap = 0;\n        break;\n      }\n\n      // mark that we need to use 100% of the adjustment from\n      // this priority, and subtract the space that it consumes\n      priorities[priority] = 1;\n      remainingGap -= prioritySum;\n\n      // if this priority has unconstrained glyphs, let them consume the remaining space\n      if (unconstrained[priority] !== 0) {\n        unconstrained[priority] = remainingGap / unconstrained[priority];\n        remainingGap = 0;\n        break;\n      }\n    }\n  }\n\n  // zero out remaining priorities (if any)\n  for (let p = priority + 1; p <= NULL_PRIORITY; p += 1) {\n    priorities[p] = 0;\n    unconstrained[p] = 0;\n  }\n\n  // if there is still space left over, assign it to the highest priority that we saw.\n  // this violates their factors, but it only happens in extreme cases\n  if (remainingGap > 0 && highestPriority > -1) {\n    priorities[highestPriority] = (highestPrioritySum + (gap - total)) / highestPrioritySum;\n  }\n\n  // create and return an array of distances to add to each glyph's advance\n  const distances = [];\n  for (let index = 0; index < factors.length; index += 1) {\n    // the distance to add to this glyph is the sum of the space to add\n    // after this glyph, and the space to add before the next glyph\n    const f = factors[index];\n    const next = factors[index + 1];\n    let dist = f.after * priorities[f.priority];\n    if (next) {\n      dist += next.before * priorities[next.priority];\n    }\n\n    // if this glyph is unconstrained, add the unconstrained distance as well\n    if (f.unconstrained) {\n      dist += f.after * unconstrained[f.priority];\n      if (next) {\n        dist += next.before * unconstrained[next.priority];\n      }\n    }\n    distances.push(dist);\n  }\n  return distances;\n};\n\n/* eslint-disable consistent-return */\n/* eslint-disable no-plusplus */\n/* eslint-disable no-restricted-syntax */\n\n\n/**\n * Adjust run positions by given distances\n *\n * @param {number[]} distances\n * @param {Object} line\n * @returns {Object} line\n */\nconst justifyLine = (distances, line) => {\n  let index = 0;\n  for (const run of line.runs) {\n    for (const position of run.positions) {\n      position.xAdvance += distances[index++];\n    }\n  }\n  return line;\n};\n\n/**\n * A JustificationEngine is used by a Typesetter to perform line fragment\n * justification. This implementation is based on a description of Apple's\n * justification algorithm from a PDF in the Apple Font Tools package.\n *\n * // TODO: Make it immutable\n *\n * @param {Object} options layout options\n */\nconst justification = options => {\n  /**\n   * @param {Object} line\n   * @returns {Object} line\n   */\n  return line => {\n    const gap = line.box.width - advanceWidth(line);\n    if (gap === 0) return; // Exact fit\n\n    const factors = getFactors(gap, line, options);\n    const distances = getDistances(gap, factors);\n    return justifyLine(distances, line);\n  };\n};\n\n/**\n * @typedef {import('../types.js').AttributedString} AttributedString\n */\n\n/**\n * Returns attributed string ascent\n *\n * @param {AttributedString} attributedString attributed string\n * @returns {number} ascent\n */\nconst ascent = attributedString => {\n  const reducer = (acc, run) => Math.max(acc, ascent$1(run));\n  return attributedString.runs.reduce(reducer, 0);\n};\n\n/* eslint-disable no-param-reassign */\n\n\n// The base font size used for calculating underline thickness.\nconst BASE_FONT_SIZE = 12;\n\n/**\n * A TextDecorationEngine is used by a Typesetter to generate\n * DecorationLines for a line fragment, including underlines\n * and strikes.\n */\nconst textDecoration = () => lineFragment => {\n  let x = lineFragment.overflowLeft || 0;\n  const overflowRight = lineFragment.overflowRight || 0;\n  const maxX = advanceWidth(lineFragment) - overflowRight;\n  lineFragment.decorationLines = [];\n  for (let i = 0; i < lineFragment.runs.length; i += 1) {\n    const run = lineFragment.runs[i];\n    const width = Math.min(maxX - x, advanceWidth$1(run));\n    const thickness = Math.max(0.5, Math.floor(run.attributes.fontSize / BASE_FONT_SIZE));\n    if (run.attributes.underline) {\n      const rect = {\n        x,\n        y: ascent(lineFragment) + thickness * 2,\n        width,\n        height: thickness\n      };\n      const line = {\n        rect,\n        opacity: run.attributes.opacity,\n        color: run.attributes.underlineColor || 'black',\n        style: run.attributes.underlineStyle || 'solid'\n      };\n      lineFragment.decorationLines.push(line);\n    }\n    if (run.attributes.strike) {\n      const y = ascent(lineFragment) - ascent$1(run) / 3;\n      const rect = {\n        x,\n        y,\n        width,\n        height: thickness\n      };\n      const line = {\n        rect,\n        opacity: run.attributes.opacity,\n        color: run.attributes.strikeColor || 'black',\n        style: run.attributes.strikeStyle || 'solid'\n      };\n      lineFragment.decorationLines.push(line);\n    }\n    x += width;\n  }\n  return lineFragment;\n};\n\nconst ignoredScripts = ['Common', 'Inherited', 'Unknown'];\n\n/**\n * @typedef {import('../../types.js').AttributedString} AttributedString\n */\n\n/**\n * Resolves unicode script in runs, grouping equal runs together\n */\nconst scriptItemizer = () => {\n  /**\n   * @param {AttributedString} attributedString attributed string\n   * @returns {AttributedString} attributed string\n   */\n  return attributedString => {\n    const {\n      string\n    } = attributedString;\n    let lastScript = 'Unknown';\n    let lastIndex = 0;\n    let index = 0;\n    const res = [];\n    if (!string) return empty();\n    for (let i = 0; i < string.length; i += 1) {\n      const char = string[i];\n      const codePoint = char.codePointAt();\n      const script = unicode.getScript(codePoint);\n      if (script !== lastScript && !ignoredScripts.includes(script)) {\n        if (lastScript !== 'Unknown') {\n          res.push({\n            start: lastIndex,\n            end: index,\n            attributes: {\n              script: lastScript\n            }\n          });\n        }\n        lastIndex = index;\n        lastScript = script;\n      }\n      index += char.length;\n    }\n    if (lastIndex < string.length) {\n      res.push({\n        start: lastIndex,\n        end: string.length,\n        attributes: {\n          script: lastScript\n        }\n      });\n    }\n    return {\n      string,\n      runs: res\n    };\n  };\n};\n\nconst SOFT_HYPHEN = '\\u00ad';\nconst hyphenator = hyphen(pattern);\n\n/**\n * @param {string} word\n * @returns {string[]} word parts\n */\nconst splitHyphen = word => {\n  return word.split(SOFT_HYPHEN);\n};\nconst cache = {};\n\n/**\n * @param {string} word\n * @returns {string[]} word parts\n */\nconst getParts = word => {\n  const base = word.includes(SOFT_HYPHEN) ? word : hyphenator(word);\n  return splitHyphen(base);\n};\nconst wordHyphenation = () => {\n  /**\n   * @param {string} word word\n   * @returns {string[]} word parts\n   */\n  return word => {\n    const cacheKey = `_${word}`;\n    if (isNil(word)) return [];\n    if (cache[cacheKey]) return cache[cacheKey];\n    cache[cacheKey] = getParts(word);\n    return cache[cacheKey];\n  };\n};\n\n/* eslint-disable no-restricted-syntax */\n\n\n/**\n * @typedef {import('../../types.js').AttributedString} AttributedString\n * @typedef {import('../../types.js').Run} Run\n */\n\n/**\n * @param {Run} run run\n * @returns {number}\n */\nconst getFontSize = run => {\n  return run.attributes.fontSize || 12;\n};\n\n/**\n * Resolve font runs in an AttributedString, grouping equal\n * runs and performing font substitution where necessary.\n */\nconst fontSubstitution = () => {\n  /**\n   * @param {AttributedString} attributedString attributed string\n   * @returns {AttributedString} attributed string\n   */\n  return attributedString => {\n    const {\n      string,\n      runs\n    } = attributedString;\n    let lastFont = null;\n    let lastIndex = 0;\n    let index = 0;\n    const res = [];\n    if (!string) return empty();\n    for (const run of runs) {\n      const fontSize = getFontSize(run);\n      const defaultFont = run.attributes.font;\n      if (string.length === 0) {\n        res.push({\n          start: 0,\n          end: 0,\n          attributes: {\n            font: defaultFont\n          }\n        });\n        break;\n      }\n      for (const char of string.slice(run.start, run.end)) {\n        const font = defaultFont;\n        if (font !== lastFont) {\n          if (lastFont) {\n            res.push({\n              start: lastIndex,\n              end: index,\n              attributes: {\n                font: lastFont,\n                scale: lastFont ? fontSize / lastFont.unitsPerEm : 0\n              }\n            });\n          }\n          lastFont = font;\n          lastIndex = index;\n        }\n        index += char.length;\n      }\n    }\n    if (lastIndex < string.length) {\n      const fontSize = getFontSize(last(runs));\n      res.push({\n        start: lastIndex,\n        end: string.length,\n        attributes: {\n          font: lastFont,\n          scale: lastFont ? fontSize / lastFont.unitsPerEm : 0\n        }\n      });\n    }\n    return {\n      string,\n      runs: res\n    };\n  };\n};\n\nexport { bidiEngine as bidi, layoutEngine as default, fontSubstitution, justification, linebreaker, scriptItemizer, textDecoration, wordHyphenation };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}